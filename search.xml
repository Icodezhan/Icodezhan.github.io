<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JQuery知识笔记</title>
      <link href="/2021/10/09/JQuery%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/09/JQuery%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery-基础"><a href="#JQuery-基础" class="headerlink" title="JQuery 基础"></a>JQuery 基础</h1><ol><li><p>概念： 一个JavaScript框架。简化JS开发</p><ul><li>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨 是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优 化HTML文档操作、事件处理、动画设计和Ajax交互。</li><li>JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</li></ul></li><li><p>快速入门</p><ol><li><p>步骤：</p><ol><li><p>下载JQuery</p><ul><li><p>目前jQuery有三个大版本：</p><p>1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能不再新增。因此一般项目来说，使用1.x版本就可以了，</span><br><span class="line">最终版本：1.12.4 (2016年5月20日)</span><br></pre></td></tr></table></figure><p>2.x：不兼容ie678，很少有人使用，官方只做BUG维护，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，</span><br><span class="line">最终版本：2.2.4 (2016年5月20日)</span><br></pre></td></tr></table></figure><p>3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。</span><br><span class="line">目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017年3月20日）</span><br></pre></td></tr></table></figure></li><li><p>jquery-xxx.js 与 jquery-xxx.min.js区别：</p><ol><li>jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</li><li>jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</li></ol></li></ul></li><li><p>导入JQuery的js文件：导入min.js文件</p></li><li><p>使用<br>var div1 = $(“#div1”);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(div1.html());</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>JQuery对象和JS对象区别与转换</p><ol><li>JQuery对象在操作时，更加方便。</li><li>JQuery对象和js对象方法不通用的.</li><li>两者相互转换<ul><li>jq – &gt; js : jq对象[索引] 或者 jq对象.get(索引)</li><li>js – &gt; jq : $(js对象)</li></ul></li></ol></li><li><p>选择器：筛选具有相似特征的元素(标签)</p><ol><li><p>基本操作学习：</p><ol><li><p>事件绑定<br>//1.获取b1按钮<br>$(“#b1”).click(function(){</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><p>});</p></li><li><p>入口函数<br>$(function () {</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>window.onload 和 $(function) 区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="built_in">window</span>.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉</span><br><span class="line">* $(<span class="function"><span class="keyword">function</span>)可以定义多次的。</span></span><br></pre></td></tr></table></figure></li><li><p>样式控制：css方法<br>// $(“#div1”).css(“background-color”,”red”);<br>$(“#div1”).css(“backgroundColor”,”pink”);</p></li></ol></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">2. 分类</span><br><span class="line">    1. 基本选择器</span><br><span class="line">        1. 标签选择器（元素选择器）</span><br><span class="line">            * 语法： $(&quot;html标签名&quot;) 获得所有匹配标签名称的元素</span><br><span class="line">        2. id选择器 </span><br><span class="line">            * 语法： $(&quot;#id的属性值&quot;) 获得与指定id属性值匹配的元素</span><br><span class="line">        3. 类选择器</span><br><span class="line">            * 语法： $(&quot;.class的属性值&quot;) 获得与指定的class属性值匹配的元素</span><br><span class="line">        4. 并集选择器：</span><br><span class="line">            * 语法： $(&quot;选择器1,选择器2....&quot;) 获取多个选择器选中的所有元素</span><br><span class="line">    2. 层级选择器</span><br><span class="line">        1. 后代选择器</span><br><span class="line">            * 语法： $(&quot;A B &quot;) 选择A元素内部的所有B元素        </span><br><span class="line">        2. 子选择器</span><br><span class="line">            * 语法： $(&quot;A &gt; B&quot;) 选择A元素内部的所有B子元素</span><br><span class="line">    3. 属性选择器</span><br><span class="line">        1. 属性名称选择器 </span><br><span class="line">            * 语法： $(&quot;A[属性名]&quot;) 包含指定属性的选择器</span><br><span class="line">        2. 属性选择器</span><br><span class="line">            * 语法： $(&quot;A[属性名=&#x27;值&#x27;]&quot;) 包含指定属性等于指定值的选择器</span><br><span class="line">        3. 复合属性选择器</span><br><span class="line">            * 语法： $(&quot;A[属性名=&#x27;值&#x27;][]...&quot;) 包含多个属性条件的选择器</span><br><span class="line">    4. 过滤选择器</span><br><span class="line">        1. 首元素选择器 </span><br><span class="line">            * 语法： :first 获得选择的元素中的第一个元素</span><br><span class="line">        2. 尾元素选择器 </span><br><span class="line">            * 语法： :last 获得选择的元素中的最后一个元素</span><br><span class="line">        3. 非元素选择器</span><br><span class="line">            * 语法： :not(selector) 不包括指定内容的元素</span><br><span class="line">        4. 偶数选择器</span><br><span class="line">            * 语法： :even 偶数，从 0 开始计数</span><br><span class="line">        5. 奇数选择器</span><br><span class="line">            * 语法： :odd 奇数，从 0 开始计数</span><br><span class="line">        6. 等于索引选择器</span><br><span class="line">            * 语法： :eq(index) 指定索引元素</span><br><span class="line">        7. 大于索引选择器 </span><br><span class="line">            * 语法： :gt(index) 大于指定索引元素</span><br><span class="line">        8. 小于索引选择器 </span><br><span class="line">            * 语法： :lt(index) 小于指定索引元素</span><br><span class="line">        9. 标题选择器</span><br><span class="line">            * 语法： :header 获得标题（h1~h6）元素，固定写法</span><br><span class="line">    5. 表单过滤选择器</span><br><span class="line">        1. 可用元素选择器 </span><br><span class="line">            * 语法： :enabled 获得可用元素</span><br><span class="line">        2. 不可用元素选择器 </span><br><span class="line">            * 语法： :disabled 获得不可用元素</span><br><span class="line">        3. 选中选择器 </span><br><span class="line">            * 语法： :checked 获得单选/复选框选中的元素</span><br><span class="line">        4. 选中选择器 </span><br><span class="line">            * 语法： :selected 获得下拉框选中的元素</span><br></pre></td></tr></table></figure><ol><li><p>DOM操作</p><ol><li><p>内容操作</p><ol><li>html(): 获取/设置元素的标签体内容 内容 –&gt; 内容</li><li>text(): 获取/设置元素的标签体纯文本内容 内容 –&gt; 内容</li><li>val()： 获取/设置元素的value属性值</li></ol></li><li><p>属性操作</p><ol><li><p>通用属性操作</p><ol><li>attr(): 获取/设置元素的属性</li><li>removeAttr():删除属性</li><li>prop():获取/设置元素的属性</li><li>removeProp():删除属性</li></ol><ul><li>attr和prop区别？<ol><li>如果操作的是元素的固有属性，则建议使用prop</li><li>如果操作的是元素自定义的属性，则建议使用attr</li></ol></li></ul></li><li><p>对class属性操作</p><ol><li>addClass():添加class属性值</li><li>removeClass():删除class属性值</li><li>toggleClass():切换class属性<ul><li>toggleClass(“one”):<ul><li>判断如果元素对象上存在class=”one”，则将属性值one删除掉。 如果元素对象上不存在class=”one”，则添加</li></ul></li></ul></li><li>css():</li></ol></li></ol></li><li><p>CRUD操作:</p><ol><li>append():父元素将子元素追加到末尾<ul><li>对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾</li></ul></li><li>prepend():父元素将子元素追加到开头<ul><li>对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</li></ul></li><li>appendTo():<ul><li>对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾</li></ul></li><li>prependTo()：<ul><li>对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</li></ul></li></ol></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">5. after():添加元素到元素后边</span><br><span class="line">    * 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</span><br><span class="line">6. before():添加元素到元素前边</span><br><span class="line">    * 对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span><br><span class="line">7. insertAfter()</span><br><span class="line">    * 对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系</span><br><span class="line">8. insertBefore()</span><br><span class="line">    * 对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span><br><span class="line"></span><br><span class="line">9. remove():移除元素</span><br><span class="line">    * 对象.remove():将对象删除掉</span><br><span class="line">10. empty():清空元素的所有后代元素。</span><br><span class="line">    * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</span><br></pre></td></tr></table></figure><ol><li>案例</li></ol><h1 id="JQuery-高级"><a href="#JQuery-高级" class="headerlink" title="JQuery 高级"></a>JQuery 高级</h1><ol><li><p>动画</p><ol><li>三种方式显示和隐藏元素<ol><li>默认显示和隐藏方式<ol><li>show([speed,[easing],[fn]])<ol><li>参数：<ol><li>speed：动画的速度。三个预定义的值(“slow”,”normal”, “fast”)或表示动画时长的毫秒数值(如：1000)</li><li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”<ul><li>swing：动画执行时效果是 先慢，中间快，最后又慢</li><li>linear：动画执行时速度是匀速的</li></ul></li><li>fn：在动画完成时执行的函数，每个元素执行一次。</li></ol></li></ol></li><li>hide([speed,[easing],[fn]])</li><li>toggle([speed],[easing],[fn])</li></ol></li><li>滑动显示和隐藏方式<ol><li>slideDown([speed],[easing],[fn])</li><li>slideUp([speed,[easing],[fn]])</li><li>slideToggle([speed],[easing],[fn])</li></ol></li><li>淡入淡出显示和隐藏方式<ol><li>fadeIn([speed],[easing],[fn])</li><li>fadeOut([speed],[easing],[fn])</li><li>fadeToggle([speed,[easing],[fn]])</li></ol></li></ol></li></ol></li><li><p>遍历</p><ol><li><p>js的遍历方式</p><ul><li>for(初始化值;循环结束条件;步长)</li></ul></li><li><p>jq的遍历方式</p><ol><li><p>jq对象.each(callback)</p><ol><li><p>语法：<br>jquery对象.each(function(index,element){});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* index:就是元素在集合中的索引</span><br><span class="line">* element：就是集合中的每一个元素对象</span><br><span class="line"></span><br><span class="line">* this：集合中的每一个元素对象</span><br></pre></td></tr></table></figure></li><li><p>回调函数返回值：</p><ul><li>true:如果当前function返回为false，则结束循环(break)。</li><li>false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ol></li><li><p>$.each(object, [callback])</p></li><li><p>for..of: jquery 3.0 版本之后提供的方式<br>for(元素对象 of 容器对象)</p></li></ol></li></ol></li><li><p>事件绑定</p><ol><li>jquery标准的绑定方式<ul><li>jq对象.事件方法(回调函数)；</li><li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。<ul><li>表单对象.submit();//让表单提交</li></ul></li></ul></li><li>on绑定事件/off解除绑定<ul><li>jq对象.on(“事件名称”,回调函数)</li><li>jq对象.off(“事件名称”)<ul><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li></ul></li><li>事件切换：toggle<ul><li>jq对象.toggle(fn1,fn2…)<ul><li>当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2…..</li></ul></li><li>注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</li></ul></li></ol></li><li><p>案例</p><ol><li><p>广告显示和隐藏</p><p>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>广告的自动显示与隐藏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">background</span>:<span class="number">#999</span>&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入jquery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            需求：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 当页面加载完，3秒后。自动显示广告</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 广告显示5秒后，自动消失。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            分析：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 使用定时器来完成。setTimeout (执行一次定时器)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                3. 使用  show/hide方法来完成广告的显示</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">//定义定时器，调用adShow方法 3秒后执行一次</span></span></span><br><span class="line"><span class="javascript">           <span class="built_in">setTimeout</span>(adShow,<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">           <span class="comment">//定义定时器，调用adHide方法，8秒后执行一次</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(adHide,<span class="number">8000</span>);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//显示广告</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">adShow</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取广告div，调用显示方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#ad&quot;</span>).show(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//隐藏广告</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">adHide</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取广告div，调用隐藏方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#ad&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 整体的DIV --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 广告DIV --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ad&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/adv.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下方正文部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        正文部分</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>抽奖</p><p>复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery案例之抽奖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;javascript&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            分析：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 给开始按钮绑定单击事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    1.1 定义循环定时器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    1.2 切换小相框的src属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        * 定义数组，存放图片资源路径</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        * 生成随机数。数组索引</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 给结束按钮绑定单击事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    1.1 停止定时器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    1.2 给大相框设置src属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgs = [<span class="string">&quot;../img/man00.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man01.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man02.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man03.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man04.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man05.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;../img/man06.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    ];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> startId;<span class="comment">//开始定时器的id</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index;<span class="comment">//随机角标</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           <span class="comment">//1. 给开始按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#startID&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1.1 定义循环定时器 20毫秒执行一次</span></span></span><br><span class="line"><span class="javascript">                startId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//1.2生成随机角标 0-6</span></span></span><br><span class="line"><span class="javascript">                    index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span>);<span class="comment">//0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//1.3设置小相框的src属性</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#img1ID&quot;</span>).prop(<span class="string">&quot;src&quot;</span>,imgs[index]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;,<span class="number">20</span>);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 给结束按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#stopID&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//处理按钮是否可以使用的效果</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">               <span class="comment">// 1.1 停止定时器</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(startId);</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 1.2 给大相框设置src属性</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#img2ID&quot;</span>).prop(<span class="string">&quot;src&quot;</span>,imgs[index]).hide();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//显示1秒之后</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#img2ID&quot;</span>).show(<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 小像框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border-style:dotted;width:160px;height:100px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img1ID&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/man00.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:160px;height:100px&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 大像框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img2ID&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/man00.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开始按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;startID&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;点击开始&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width:150px;height:150px;font-size:22px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;stopID&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;点击停止&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width:150px;height:150px;font-size:22px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>插件：增强JQuery的功能</p><ol><li>实现方式：<ol><li>$.fn.extend(object)<ul><li>增强通过Jquery获取的对象的功能 $(“#id”)</li></ul></li><li>$.extend(object)<ul><li>增强JQeury对象自身的功能 $/jQuery</li></ul></li></ol></li></ol></li></ol><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax&amp;JSON笔记</title>
      <link href="/2021/10/09/Ajax-JSON%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/09/Ajax-JSON%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、AJAX"><a href="#一、AJAX" class="headerlink" title="一、AJAX"></a>一、AJAX</h1><ol><li><p>概念： ASynchronous JavaScript And XML 异步的JavaScript 和 XML</p><ol><li><p>异步和同步：客户端和服务器端相互通信的基础上</p><ul><li><p>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</p></li><li><p>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</p><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1]<br>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><p>提升用户的体验</p></li></ul></li><li><p>实现方式：</p><ol><li><p>原生的JS实现方式（了解）</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建核心对象</span></span><br><span class="line">     <span class="keyword">var</span> xmlhttp;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">     &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">         xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">         xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//2. 建立连接</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">         参数：</span></span><br><span class="line"><span class="comment">             1. 请求方式：GET、POST</span></span><br><span class="line"><span class="comment">                 * get方式，请求参数在URL后边拼接。send方法为空参</span></span><br><span class="line"><span class="comment">                 * post方式，请求参数在send方法中定义</span></span><br><span class="line"><span class="comment">             2. 请求的URL：</span></span><br><span class="line"><span class="comment">             3. 同步或异步请求：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;ajaxServlet?username=tom&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//3.发送请求</span></span><br><span class="line">     xmlhttp.send();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//4.接受并处理来自服务器的响应结果</span></span><br><span class="line">     <span class="comment">//获取方式 ：xmlhttp.responseText</span></span><br><span class="line">     <span class="comment">//什么时候获取？当服务器响应成功后再获取</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span></span><br><span class="line">     xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span></span><br><span class="line">         <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">//获取服务器的响应结果</span></span><br><span class="line">             <span class="keyword">var</span> responseText = xmlhttp.responseText;</span><br><span class="line">             alert(responseText);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li><li><p>JQeury实现方式</p><ol><li><p>$.ajax()</p><ul><li><p>语法：$.ajax({键值对});</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&quot;ajaxServlet1111&quot;</span> , <span class="comment">// 请求路径</span></span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span> , <span class="comment">//请求方式</span></span><br><span class="line">          <span class="comment">//data: &quot;username=jack&amp;age=23&quot;,//请求参数</span></span><br><span class="line">          <span class="attr">data</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;,</span><br><span class="line">          <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">              alert(data);</span><br><span class="line">          &#125;,<span class="comment">//响应成功后的回调函数</span></span><br><span class="line">          <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              alert(<span class="string">&quot;出错啦...&quot;</span>)</span><br><span class="line">          &#125;,<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span><span class="comment">//设置接受到的响应数据的格式</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>$.get()：发送get请求</p><ul><li>语法：$.get(url, [data], [callback], [type])<ul><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li></ul></li></ul></li><li><p>$.post()：发送post请求</p><ul><li>语法：$.post(url, [data], [callback], [type])<ul><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li></ul></li></ul></li></ol></li></ol></li></ol></li></ol><h1 id="二、JSON"><a href="#二、JSON" class="headerlink" title="二、JSON"></a>二、JSON</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><blockquote><p>概念： JavaScript Object Notation JavaScript对象表示法</p></blockquote><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">p.setAge(<span class="number">23</span>);</span><br><span class="line">p.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">23</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><h3 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h3><ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中） {“persons”:[{},{}]}</li><li>对象（在花括号中） {“address”:{“province”：”陕西”….}}</li><li>null</li></ol></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用{}定义json 格式</li><li>方括号保存数组：[]</li></ul><h3 id="2-2-获取数据"><a href="#2-2-获取数据" class="headerlink" title="2.2 获取数据:"></a>2.2 获取数据:</h3><ol><li><p>json对象.键名</p></li><li><p>json对象[“键名”]</p></li><li><p>数组对象[索引]</p></li><li><p>遍历</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义基本格式</span></span><br><span class="line">     <span class="keyword">var</span> person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> ps = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">24</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">false</span>&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取person对象中所有的键和值</span></span><br><span class="line">     <span class="comment">//for in 循环</span></span><br><span class="line">    <span class="comment">/* for(var key in person)&#123;</span></span><br><span class="line"><span class="comment">         //这样的方式获取不行。因为相当于  person.&quot;name&quot;</span></span><br><span class="line"><span class="comment">         //alert(key + &quot;:&quot; + person.key);</span></span><br><span class="line"><span class="comment">         alert(key+&quot;:&quot;+person[key]);</span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取ps中的所有值</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> p = ps[i];</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">             alert(key+<span class="string">&quot;:&quot;</span>+p[key]);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-JSON数据和Java对象的相互转换"><a href="#2-3-JSON数据和Java对象的相互转换" class="headerlink" title="2.3 JSON数据和Java对象的相互转换"></a>2.3 JSON数据和Java对象的相互转换</h3><ul><li>JSON解析器：<ul><li>常见的解析器：Jsonlib，Gson，fastjson，jackson</li></ul></li><li>JSON转为Java对象<ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ul><li>readValue(json字符串数据,Class)</li></ul></li></ol></li><li>Java对象转换JSON<ol><li>使用步骤：<ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>转换方法：<ul><li>writeValue(参数1，obj):<br>参数1：<br>File：将obj对象转换为JSON字符串，并保存到指定的文件中<br>Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中<br>OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</li><li>writeValueAsString(obj):将对象转为json字符串</li></ul></li><li>注解：<ol><li>@JsonIgnore：排除属性。</li><li>@JsonFormat：属性值得格式化<ul><li>@JsonFormat(pattern = “yyyy-MM-dd”)</li></ul></li></ol></li><li>复杂java对象转换<ol><li>List：数组</li><li>Map：对象格式一致</li></ol></li></ol></li></ol></li></ol></li></ul><h2 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h2><ul><li>校验用户名是否存在<ol><li>服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：<ol><li>$.get(type):将最后一个参数type指定为”json”</li><li>在服务器端设置MIME类型<br>response.setContentType(“application/json;charset=utf-8”);</li></ol></li></ol></li></ul><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识笔记（三）</title>
      <link href="/2021/10/09/MySQL-03/"/>
      <url>/2021/10/09/MySQL-03/</url>
      
        <content type="html"><![CDATA[<h1 id="八-事务"><a href="#八-事务" class="headerlink" title="八.事务"></a>八.事务</h1><h2 id="8-1-什么是事务"><a href="#8-1-什么是事务" class="headerlink" title="8.1 什么是事务"></a>8.1 什么是事务</h2><ul><li>(1) 不可分割的操作,假设该操作有ABCD四个步骤组成.<br>若ABCD四个步骤都成功完成,则认为事务成功.<br>若ABCD中任意一个步骤操作失败,则认为事务失败</li><li>(2) 每条sql语句都是一个事务</li><li>(3) 事务只对DML语句有效,对于DQL无效</li></ul><h2 id="8-2-事务的ACID"><a href="#8-2-事务的ACID" class="headerlink" title="8.2 事务的ACID"></a>8.2 事务的ACID</h2><ul><li><p>(1) <code>原子性（Atomicity）</code>:原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</p></li><li><p>(2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一致性（Consistency）</span><br></pre></td></tr></table></figure><p>:一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><blockquote><p>让数据保持一定上的合理；<br>一个商品出库时，仓库商品数量减1，对应用户的购物车中商品加1。</p></blockquote></li><li><p>(3) <code>隔离性（Isolation）</code>:隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p></li><li><p>(4) <code>持久性（Durability）</code>:持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了。</p></li></ul><h2 id="8-3-事务的使用"><a href="#8-3-事务的使用" class="headerlink" title="8.3 事务的使用"></a>8.3 事务的使用</h2><ul><li>① 开启事务：<code>start transaction</code></li><li>② 回滚事务：<code>rollback</code>：当遇到一突发情况，撤销执行的sql语句。</li><li>③ 提交事务：<code>commit</code>：所有语句全部执行完毕，没有发生异常,提交事务，更新到数据库当中。<br>执行流程：<br><img src="MySQL-03/49.png" alt="01"></li></ul><h2 id="8-4-事务的隔离级别"><a href="#8-4-事务的隔离级别" class="headerlink" title="8.4 事务的隔离级别"></a>8.4 事务的隔离级别</h2><ul><li>① <code>Read uncommitted：</code><br>就是一个事务可以读取另一个未提交事务的数据</li><li>② <code>Read committed：</code><br>一个事务要等另一个事务提交后才能读取数据</li><li>③ <code>Repeatable read：</code><br>就是在开始读取数据（事务开启）时，不再允许修改操作</li><li>④ <code>Serializable:</code><br>在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读</li><li>查看隔离级别：<code>select @@global.tx_isolation,@@tx_isolation;</code></li><li>设置隔离级别：<ul><li>全局的：<code>set global transaction isolation level read committed;</code></li><li>当前会话：<code>set session transaction isolation level read committed;</code></li></ul></li></ul><h2 id="8-5-事务的并发问题"><a href="#8-5-事务的并发问题" class="headerlink" title="8.5 事务的并发问题"></a>8.5 事务的并发问题</h2><ul><li><p>脏读：<br>　　老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。<br>实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。<br>解决办法：<code>Read committed！读提交，能解决脏读问题</code></p></li><li><p>不可重复读：<br>　　程序员拿着工资卡（卡里当然是只有3.6万），当他买单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了。程序员就会很郁闷，明明卡里是有钱的…<br>一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读<br>解决办法：<code>Repeatable read</code></p></li><li><p>重复读：<br>　　程序员拿着工资卡（卡里还是有3.6万），当他买时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p></li><li><p>幻读：</p><p>　　程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p><p>解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializable</span><br></pre></td></tr></table></figure><blockquote><p>但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p></blockquote></li><li><p>对应关系：</p><table><thead><tr><th align="left">事务隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">不可重复读（read-committed）</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td align="left">否</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="left">串行化（serializable）</td><td align="left">否</td><td align="left">否</td><td align="left">否</td></tr></tbody></table></li></ul><h1 id="九-权限操作"><a href="#九-权限操作" class="headerlink" title="九. 权限操作"></a>九. 权限操作</h1><ul><li><p>什么是权限</p><blockquote><p>限制一个用户能够做什么事情，在MySQL中，可以设置全局权限，指定数据库权限，指定表权限，指定字段权限</p></blockquote></li><li><p>有哪些权限</p><table><thead><tr><th align="left">关键字</th><th align="left">权限</th></tr></thead><tbody><tr><td align="left">CREATE</td><td align="left">创建数据库、表或索引权限</td></tr><tr><td align="left">DROP</td><td align="left">除数据库或表权限</td></tr><tr><td align="left">ALTER</td><td align="left">ALTER更改表，比如添加字段、索引等</td></tr><tr><td align="left">DELETE</td><td align="left">删除数据权限</td></tr><tr><td align="left">INDEX</td><td align="left">索引权限</td></tr><tr><td align="left">INSERT</td><td align="left">插入权限</td></tr><tr><td align="left">SELECT</td><td align="left">查询权限</td></tr><tr><td align="left">UPDATE</td><td align="left">更新权限</td></tr><tr><td align="left">CREATE VIEW</td><td align="left">创建视图权限</td></tr><tr><td align="left">EXECUTE</td><td align="left">执行存储过程权限</td></tr></tbody></table></li><li><p>创建用户：<code>create user &#39;用户名&#39;@&#39;localhost&#39; identified by &#39;密码&#39;;</code></p></li><li><p>删除用户：<code>DROP USER 用户名称</code></p></li><li><p>分配权限：<code>GRANT 权限 (columns) ON 数据库对象 TO 用户 IDENTIFIED BY &quot;密码&quot; WITH GRANT OPTION;</code></p></li><li><p>创建对指定数据库的所有权限：<br><code>grant ALL PRIVILEGES on 数据库名.* TO gaowei@localhost IDENTIFIED BY &#39;1234&#39; WITH GRANT OPTION;</code><br><code>flush privileges;</code></p><ul><li>创建一个超级管理员mylk,密码为1234，拥有所有权限，并能继续授予权限：<br><code>grant ALL PRIVILEGES on *.* TO mylk@localhost IDENTIFIED BY &#39;1234&#39; WITH GRANT OPTION;</code><br><code>flush privileges;</code></li></ul></li><li><p>创建一个gxq用户只能对stu表进行CRUD操作：<br><code>grant insert,update,select,delete on my_test.stu TO privuser@localhost IDENTIFIED BY &#39;1234&#39;;</code><br><code>flush privileges;</code></p></li><li><p>查看权限：<code>show grants</code></p><ul><li>查看指定用户的权限：<code>show grants for root@localhost;</code></li></ul></li><li><p>删除权限：<code>REVOKE 权限 ON 数据库对象 FROM 用户；</code></p></li></ul><h1 id="十-存储过程"><a href="#十-存储过程" class="headerlink" title="十.存储过程"></a>十.存储过程</h1><h2 id="10-1-什么是存储过程"><a href="#10-1-什么是存储过程" class="headerlink" title="10.1 什么是存储过程"></a>10.1 什么是存储过程</h2><blockquote><p>一组可编程的函数，是为了完成特定功能的SQL语句集<br>经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。<br>存储过程就是具有名字的一段代码，用来完成一个特定的功能。<br>创建的存储过程保存在数据库的数据字典中</p></blockquote><h2 id="10-2-为什么要用存储过程"><a href="#10-2-为什么要用存储过程" class="headerlink" title="10.2 为什么要用存储过程"></a>10.2 为什么要用存储过程</h2><ul><li>将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用</li><li>批量处理</li><li>统一接口，确保数据的安全</li><li>相对于oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少。</li></ul><h2 id="10-3-存储过程的创建和调用"><a href="#10-3-存储过程的创建和调用" class="headerlink" title="10.3 存储过程的创建和调用"></a>10.3 存储过程的创建和调用</h2><ul><li><p>DELIMITER $$</p><ul><li>它与存储过程语法无关</li><li>DELIMITER语句将标准分隔符 - 分号(;)更改为：$$</li><li>因为我们想将存储过程作为整体传递给服务器</li><li>而不是让mysql工具一次解释每个语句</li><li>告诉mysql解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。但有时候，不希望MySQL这么做。在为可能输入较多的语句，且语句中包含有分号。使用delimiter $$，这样只有当$$出现之后，mysql解释器才会执行这段语句。 　　　　　　</li></ul></li><li><p>创建存储过程</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE 名称()</span><br><span class="line">BEGIN</span><br><span class="line">语句</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>调用存储过程</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call  名称();</span><br></pre></td></tr></table></figure></li><li><p>删除存储过程</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure  名称</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-4-存储过程变量"><a href="#10-4-存储过程变量" class="headerlink" title="10.4 存储过程变量"></a>10.4 存储过程变量</h2><ul><li>在存储过程中声明一个变量</li><li>使用DECLARE语句<br><code>DECLARE 变量名 数据类型(大小) DEFAULT 默认值;</code><br>可以声明一个名为total_sale的变量，数据类型为INT，默认值为0<br><code>DECLARE total_sale INT DEFAULT 0;</code><br>声明共享相同数据类型的两个或多个变量<br><code>DECLARE x, y INT DEFAULT 0;</code></li><li>分配变量值<br>要为变量分配一个值，可以使用SET语句<br><code>SET total_count = 10;</code><br>使用SELECT INTO语句将查询的结果分配给一个变量<br><code>SELECT COUNT(*) INTO total_products FROM products;</code></li><li>变量的范围<br>如果在存储过程中声明一个变量，那么当达到存储过程的END语句时，它将超出范围，因此在其它代码块中无法访问。</li></ul><h2 id="10-5-存储过程参数"><a href="#10-5-存储过程参数" class="headerlink" title="10.5 存储过程参数"></a>10.5 存储过程参数</h2><ul><li><p>三种类型</p><ul><li><p><code>IN</code>：表示调用者向过程传入值（传入值可以是字面量或变量）</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER $$</span><br><span class="line">mysql&gt; create procedure getName(IN name VARCHAR(50))</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt; SELECT * FROM emp WHERE ename = name;</span><br><span class="line">    -&gt; END $$</span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line">mysql&gt; CALL getName(&#x27;李白&#x27;);</span><br><span class="line">+-------+-------+----------+------+------------+--------+------+--------+</span><br><span class="line">| empno | ename | job      | mgr  | hiredate   | salary | comm | deptno |</span><br><span class="line">+-------+-------+----------+------+------------+--------+------+--------+</span><br><span class="line">|  7521 | 李白  | 销售人员 | 7698 | 2011-02-22 |   1250 |  500 |     30 |</span><br><span class="line">+-------+-------+----------+------+------------+--------+------+--------+</span><br><span class="line">1 row in set (0.08 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>OUT</code>：表示过程向调用者传出值</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELIMITER $$</span><br><span class="line">mysql&gt; CREATE PROCEDURE getsalary( IN name VARCHAR(25),OUT res INT)</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt; SELECT salary INTO res FROM emp WHERE ename = name;</span><br><span class="line">    -&gt; END $$</span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; CALL getsalary(&#x27;李白&#x27;,@res);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @res;</span><br><span class="line">+------+</span><br><span class="line">| @res |</span><br><span class="line">+------+</span><br><span class="line">| 1250 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>INOUT</code>：INOUT参数是IN和OUT参数的组合。</p></li></ul></li><li><p>定义参数：<code>create produce name(模式,参数名称 数据类型（大小）)</code></p></li></ul><h2 id="10-6-存储过程语句"><a href="#10-6-存储过程语句" class="headerlink" title="10.6 存储过程语句"></a>10.6 存储过程语句</h2><ul><li><p>IF语句</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IF expression THEN </span><br><span class="line">statements;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF expression THEN</span><br><span class="line">statements;</span><br><span class="line">ELSE</span><br><span class="line">else-statements;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure></li><li><p>CASE语句</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE  case_expression</span><br><span class="line">   WHEN when_expression_1 THEN commands</span><br><span class="line">   WHEN when_expression_2 THEN commands</span><br><span class="line">   ...</span><br><span class="line">   ELSE commands</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure></li><li><p>循环</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE expression DO</span><br><span class="line">   statements</span><br><span class="line">END WHILE</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line"> statements;</span><br><span class="line">UNTIL expression</span><br><span class="line">END REPEAT</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-7-查看存储过程"><a href="#10-7-查看存储过程" class="headerlink" title="10.7 查看存储过程"></a>10.7 查看存储过程</h2><ul><li>查看所有存储过程：<code>SHOW PROCEDURE STATUS;</code></li><li>查看指定数据库中的存储过程：<code>SHOW PROCEDURE STATUS WHERE db = &#39;My_test4&#39;;</code></li><li>查看指定存储过程源代码：<code>SHOW CREATE PROCEDURE 存储过程名;</code></li></ul><h1 id="十一-自定义函数"><a href="#十一-自定义函数" class="headerlink" title="十一. 自定义函数"></a>十一. 自定义函数</h1><ul><li>自定义函数<br><img src="MySQL-03/50.png" alt="01"></li><li>随即产一个部门编号<br><img src="MySQL-03/51.png" alt="01"></li></ul><h1 id="十二-索引"><a href="#十二-索引" class="headerlink" title="十二. 索引"></a>十二. 索引</h1><h2 id="12-1-什么是索引"><a href="#12-1-什么是索引" class="headerlink" title="12.1 什么是索引"></a>12.1 什么是索引</h2><blockquote><p>索引用于快速找出在某个列中有一特定值的行，<br>不使用索引，MySQL必须从第一条记录开始读完整个表，直到找出相关的行，<br>表越大，查询数据所花费的时间就越多，<br>如果表中查询的列有一个索引，MySQL能够快速到达一个位置去搜索数据文件，<br>而不必查看所有数据，那么将会节省很大一部分时间</p></blockquote><h2 id="12-2-索引的优势与劣势"><a href="#12-2-索引的优势与劣势" class="headerlink" title="12.2 索引的优势与劣势"></a>12.2 索引的优势与劣势</h2><ul><li>优势<ul><li>类似大学图书馆建书目索引，提高数据检索效率，降低数据库的IO成本。</li><li>通过索引对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul></li><li>劣势<ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的。</li><li>虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。</li></ul></li></ul><h2 id="12-3-索引的分类"><a href="#12-3-索引的分类" class="headerlink" title="12.3 索引的分类"></a>12.3 索引的分类</h2><ul><li>单值索引：<br>　　即一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：<br>　　索引列的值必须唯一，但允许有空值。</li><li>复合索引：<br>　　一个索引包含多个列。<br>  　　INDEX MultiIdx(id,name,age)</li><li>全文索引：<br>　　只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引</li></ul><h2 id="12-4-索引操作"><a href="#12-4-索引操作" class="headerlink" title="12.4 索引操作"></a>12.4 索引操作</h2><ul><li>创建索引：<code>CREATE INDEX 索引名称 ON table (column[, column]...);</code><br>例如：<code>create INDEX salary_index ON emp(salary);</code></li><li>删除索引：<code>DROP INDEX 索引名称 ON 表名;</code></li><li>查看索引：<code>show index from 表名;</code><ul><li><code>Table</code>: 表名</li><li><code>Non_unique</code>: 如果索引不能包括重复词，则为0。如果可以，则为1。</li><li><code>Key_name</code>: 索引的名称</li><li><code>Seq_in_index</code>: 索引中的列序列号，从1开始。</li><li><code>Column_name</code>: 列名称。</li><li><code>Collation</code>: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。</li><li><code>Cardinality</code>: 索引中唯一值的数目的估计值。<br>过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li><li><code>Sub_part</code>: 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li><li><code>Packed</code>: 指示关键字如何被压缩。如果没有被压缩，则为NULL。</li><li><code>Null</code>: 如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li><li><code>Index_type</code>: 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li><li><code>Comment</code>: 索引备注信息</li></ul></li><li>自动创建索引<ul><li>在表上定义了主键时， 会自动创建一个对应的唯一索引</li><li>在表上定义了一个外键时，会自动创建一个普通索引</li></ul></li></ul><h2 id="12-5-EXPLAIN"><a href="#12-5-EXPLAIN" class="headerlink" title="12.5 EXPLAIN"></a>12.5 EXPLAIN</h2><blockquote><p>用来查看索引是否正在被使用，并且输出其使用的索引的信息。</p></blockquote><ul><li><p><strong><code>id</code></strong>: SELECT识别符。这是SELECT的查询序列号,也就是一条语句中，该select是第几次出现。在次语句中，select就只有一个，所以是1.</p></li><li><p><strong><code>select_type</code></strong>: 所使用的SELECT查询类型，SIMPLE表示为简单的SELECT，不实用UNION或子查询，就为简单的SELECT。</p></li><li><p><strong><code>table</code></strong>: 数据表的名字。他们按被读取的先后顺序排列</p></li><li><p><strong><code>type</code></strong>: 指定本数据表和其他数据表之间的关联关系，该表中所有符合检索值的记录都会被取出来和从上一个表中取出来的记录作联合。</p></li><li><p><strong><code>key</code></strong>: 实际选用的索引</p></li><li><p><strong><code>possible_keys</code></strong>: MySQL在搜索数据记录时可以选用的各个索引，该表中就只有一个索引，year_publication</p></li><li><p><strong><code>key_len</code></strong>: 显示了mysql使用索引的长度(也就是使用的索引个数)，当 key 字段的值为 null时，索引的长度就是 null。注意，key_len的值可以告诉你在联合索引中mysql会真正使用了哪些索引。这里就使用了1个索引，所以为1，</p></li><li><p><strong><code>ref</code></strong>: 给出关联关系中另一个数据表中数据列的名字。常量（const），这里使用的是1990，就是常量。</p></li><li><p><strong><code>rows</code></strong>: MySQL在执行这个查询时预计会从这个数据表里读出的数据行的个数。</p></li><li><p><strong><code>extra</code></strong>: 提供了与关联操作有关的信息，没有则什么都不写。 　　　</p><h2 id="12-6-索引结构"><a href="#12-6-索引结构" class="headerlink" title="12.6 索引结构"></a>12.6 索引结构</h2><blockquote><p>先会对数据进行排序</p></blockquote></li><li><p>btree索引（ B+树索引 ）</p><ul><li>B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差值不超过1，而且同层级的节点间有指针相互链接。<br><img src="MySQL-03/52.png" alt="01"></li></ul></li><li><p>hash索引</p><ul><li>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。</li><li>hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。</li></ul></li></ul><h2 id="12-7-创建索引的情况"><a href="#12-7-创建索引的情况" class="headerlink" title="12.7 创建索引的情况"></a>12.7 创建索引的情况</h2><ul><li>哪些情况需要创建索引<ul><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>频繁更新的字段不适合建立索引，因为每次更新不单单是更新了记录还会更新索引</li><li>WHERE条件里用不到的字段不创建索引</li><li>查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度</li><li>查询中统计或者分组字段</li></ul></li><li>哪些情况不需要创建索引<ul><li>表记录太少</li><li>经常增删改的表</li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果</li></ul></li></ul><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识笔记（二）</title>
      <link href="/2021/10/09/MySQL-02/"/>
      <url>/2021/10/09/MySQL-02/</url>
      
        <content type="html"><![CDATA[<h1 id="五-分组查询和完整性"><a href="#五-分组查询和完整性" class="headerlink" title="五. 分组查询和完整性"></a>五. 分组查询和完整性</h1><h2 id="5-1-分组查询"><a href="#5-1-分组查询" class="headerlink" title="5.1 分组查询"></a>5.1 分组查询</h2><blockquote><p>将查询结果按照1个或多个字段进行分组，字段值相同的为一组</p></blockquote><ul><li><p>分组使用<br><code>SELECT gender from employee GROUP BY gender;</code><br>根据gender字段来分组，gender字段的全部值只有两个(‘男’和’女’)，所以分为了两组<br>当group by单独使用时，只显示出每组的第一条记录<br>所以group by单独使用时的实际意义不大</p></li><li><p>分组注意事项<br>在使用分组时，select后面直接跟的字段一般都出现在group by 后</p></li><li><p>group by + group_concat()<br>group_concat(字段名)可以作为一个输出字段来使用<br>表示分组之后，根据分组结果，使用group_concat()来放置每一组的某字段的值的集合<br><code>SELECT gender,GROUP_CONCAT(name) from employee GROUP BY gender;</code><br><img src="MySQL-02/01.png" alt="01"></p></li><li><p>group by + 聚合函数<br>通过group_concat()的启发，我们既然可以统计出每个分组的某字段的值的集合，那么我们也可以通过集合函数来对这个“值的集合”做一些操作</p><ul><li><p>使用</p><p>查询每个部门的部门名称和每个部门的工资和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,SUM(salary) FROM employee GROUP BY department;</span><br></pre></td></tr></table></figure><p>查询每个部门的部门名称以及每个部门的人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,COUNT(*) FROM employee GROUP BY department;</span><br></pre></td></tr></table></figure><p>查询每个部门的部门名称以及每个部门工资大于1500的人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,COUNT(salary) FROM employee WHERE salary &gt; 1500 GROUP BY department;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>group by + having</p><blockquote><p>用来分组查询后指定一些条件来输出查询结果<br>having作用和where一样，但having只能用于group by</p></blockquote><ul><li><p>查询工资总和大于9000的部门名称以及工资和：</p><p>（1）查询每个部分的工资总和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,GROUP_CONCAT(salary) FROM employee GROUP BY department;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,SUM(salary) FROM employee GROUP BY department;</span><br></pre></td></tr></table></figure><p>（2）总和大于9000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department,SUM(salary) FROM employee GROUP BY department HAVING SUM(salary)&gt;9000;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>having与where的区别：</p><ul><li>having是在分组后对数据进行过滤.</li><li>where是在分组前对数据进行过滤</li><li>having后面可以使用分组函数(统计函数)</li><li>where后面不可以使用分组函数</li><li>WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。</li></ul></li><li><p>查询工资大于2000的，工资总和大于6000的部门名称以及工资和：</p><blockquote><ul><li><p>查询工资大于2000的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employee WHERE salary &gt;2000;</span><br></pre></td></tr></table></figure></li><li><p>各部门工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT department, GROUP_CONCAT(salary) FROM employee </span><br><span class="line">WHERE salary &gt;2000 GROUP BY department;</span><br></pre></td></tr></table></figure></li><li><p>各部门工资总和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department, SUM(salary) FROM employee WHERE salary &gt;2000 GROUP BY department;</span><br></pre></td></tr></table></figure></li><li><p>各部门工资总和大于6000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT department, SUM(salary) FROM employee WHERE salary &gt;2000 </span><br><span class="line">GROUP BY department HAVING SUM(salary)&gt;6000;</span><br></pre></td></tr></table></figure></li><li><p>各部门工资总和大于6000降序排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT department, SUM(salary) FROM employee </span><br><span class="line">WHERE salary &gt;2000 </span><br><span class="line">GROUP BY department </span><br><span class="line">HAVING SUM(salary)&gt;6000 </span><br><span class="line">ORDER BY SUM(salary) DESC;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>书写顺序和执行顺序</p><blockquote><p>书写顺序：<br><img src="MySQL-02/10.png" alt="01"><br>执行顺序：<br><img src="MySQL-02/11.png" alt="01"></p></blockquote></li></ul><h2 id="5-2-LIMIT"><a href="#5-2-LIMIT" class="headerlink" title="5.2 LIMIT"></a>5.2 LIMIT</h2><blockquote><p>从哪一行开始查，总共要查几行</p></blockquote><ul><li><code>Limit 参数1，参数2</code><br>参数1：从哪一行开始查<br>参数2：一共要查几行<br>角标是从0开始</li><li>格式：<code>select * from 表名 limit 0,3;</code><br>分页思路:<br><img src="MySQL-02/12.png" alt="01"></li></ul><h2 id="5-3-数据的完整性"><a href="#5-3-数据的完整性" class="headerlink" title="5.3 数据的完整性"></a>5.3 数据的完整性</h2><ul><li>什么是数据的完整性<br>保证用户输入的数据保存到数据库中是正确的。</li><li>如何添加数据完整性<br>在创建表时给表中添加约束</li><li>完整性分类<ul><li>实体完整性</li><li>域完整性</li><li>引用完整性</li></ul></li></ul><h2 id="5-4-实体完整性"><a href="#5-4-实体完整性" class="headerlink" title="5.4 实体完整性"></a>5.4 实体完整性</h2><ul><li>什么是实体完整性<br>表中的一行(一条记录)代表一个实体（entity）</li><li>实体完整性的作用<br>标识每一行数据不重复。行级约束</li><li>约束类型<ul><li>主键约束（primary key）</li><li>唯一约束(unique)</li><li>自动增长列(auto_increment)</li></ul></li><li>① 主键约束<ul><li>特点：<br>每个表中要有一个主键<br>数据唯一，且不能为null</li><li>添加方式：<br><code>CREATE TABLE 表名(字段名1 数据类型 primary key,字段2 数据类型);</code><br><code>CREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,primary key(要设置主键的字段));</code><br><code>CREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,primary key(主键1，主键2));</code><br><code>联合主键：两个字段数据同时相同时，才违反联合主键约束。</code><br><code>先创建表 ,再去修改表，添加主键: ALTER TABLE student ADD CONSTRAINT PRIMARY KEY (id);</code></li></ul></li><li>② 唯一约束<ul><li>特点<br>指定列的数据不能重复<br>可以为空值</li><li>格式<br><code>CREATE TABLE 表名(字段名1 数据类型 字段2 数据类型 UNIQUE);</code></li></ul></li><li>③ 自动增长列<ul><li>特点<br>指定列的数据自动增长<br>即使数据删除，还是从删除的序号继续往下</li><li>格式：<br><code>CREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE);</code></li></ul></li></ul><h2 id="5-5-域完整性"><a href="#5-5-域完整性" class="headerlink" title="5.5 域完整性"></a>5.5 域完整性</h2><ul><li>使用：<br>限制此单元格的数据正确，不对照此列的其它单元格比较<br>域代表当前单元格</li><li>域完整性约束<ul><li>数据类型：<br>数值类型、日期类型、字符串类型</li><li>非空约束（not null）：<br><code>CREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE not null);</code></li><li>默认值约束(default) ：<br><code>CREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE not null default &#39;男&#39;);</code><br>插入的时候，values当中的值直接给default</li></ul></li></ul><h2 id="5-6-参照完整性"><a href="#5-6-参照完整性" class="headerlink" title="5.6 参照完整性"></a>5.6 参照完整性</h2><ul><li>什么是参照完整性<br>是指表与表之间的一种对应关系<br>通常情况下可以通过设置两表之间的主键、外键关系，或者编写两表的触发器来实现。<br>有对应参照完整性的两张表格，在对他们进行数据插入、更新、删除的过程中，系统都会将被修改表格与另一张对应表格进行对照，从而阻止一些不正确的数据的操作。</li><li>数据库的主键和外键类型一定要一致；</li><li>两个表必须得要是InnoDB类型</li><li>设置参照完整性后 ，外键当中的内值，必须得是主键当中的内容</li><li>一个表设置当中的字段设置为主键，设置主键的为主表：<br><code>CREATE TABLE student(sid int PRIMARY key,name varchar(50) not null,sex varchar(10) default &#39;男&#39;);</code></li><li>创建表时，设置外键，设置外键的为子表<br><code>CREATE TABLE score( sid INT, score DOUBLE, CONSTRAINT fk_stu_score_sid FOREIGN KEY(sid) REFERENCES student(sid));</code><br><img src="MySQL-02/13.png" alt="01"></li></ul><h1 id="六-多表查询"><a href="#六-多表查询" class="headerlink" title="六. 多表查询"></a>六. 多表查询</h1><h2 id="6-1-表之间关系"><a href="#6-1-表之间关系" class="headerlink" title="6.1 表之间关系"></a>6.1 表之间关系</h2><ul><li><p>一对一：<br>一夫一妻<br><img src="MySQL-02/14.png" alt="01"></p></li><li><p>一对多关系：<br>例如：一个人可以拥有多辆汽车，要求查询某个人拥有的所有车辆。<br>① 创建Person表:</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person (</span><br><span class="line">id int PRIMARY KEY NOT NULL,</span><br><span class="line">name VARCHAR(50),</span><br><span class="line">age INT,</span><br><span class="line">sex CHAR(1),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>② 创建Car表:</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE car (</span><br><span class="line">cid int PRIMARY KEY,</span><br><span class="line">cname VARCHAR(50),</span><br><span class="line">color VARCHAR(25),</span><br><span class="line">pid INT,</span><br><span class="line">CONSTRAINT fk_person FOREIGN KEY (pid) PEFERENCES person(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="MySQL-02/17.png" alt="01"></p></li><li><p>多对多关系：<br>例如：学生选课，一个学生可以选修多门课程，每门课程可供多个学生选择。<br>一个学生可以有多个老师，而一个老师也可以有多个学生<br>① 创建老师表</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE teacher (</span><br><span class="line">tid int PRIMARY KEY auto_increment,</span><br><span class="line">name VARCHAR(50),</span><br><span class="line">age INT,</span><br><span class="line">gender char(1) DEFAULT &#x27;男&#x27;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>② 创建学生表</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student (</span><br><span class="line">sid int PRIMARY KEY auto_increment,</span><br><span class="line">name VARCHAR(50) NOT NULL,</span><br><span class="line">age int,</span><br><span class="line">gender char(1) DEFAULT &#x27;男&#x27;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>③ 创建学生与老师关系表</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tea_stu_rel (</span><br><span class="line">tid INT,</span><br><span class="line">sid INT,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="MySQL-02/21.png" alt="01"></p><p>④ 添加外键</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tea_stu_rel ADD CONSTRAINT fk_tid FOREIGN KEY(tid) REFERENCES teacher(tid);</span><br><span class="line">ALTER TABLE tea_stu_rel ADD CONSTRAINT fk_sid FOREIGN KEY(sid) REFERENCES teacher(sid);</span><br></pre></td></tr></table></figure></li><li><p>为什么要拆分表，避免大量冗余数据的出现<br><img src="MySQL-02/22.png" alt="01"><img src="MySQL-02/23.png" alt="01"></p></li></ul><h2 id="6-2-合并结果集"><a href="#6-2-合并结果集" class="headerlink" title="6.2 合并结果集"></a>6.2 合并结果集</h2><ul><li><p>什么是合并结果集<br>合并结果集就是把两个select语句的查询结果合并到一起</p></li><li><p>合并结果集的两种方式</p><ul><li>UNION：合并时去除重复记录</li><li>UNION ALL：合并时不去除重复记录</li></ul></li><li><p>格式：<br>UNION关键字：</p><ul><li><code>SELECT * FROM 表1 UNION SELECT * FROM 表2；</code></li><li><code>SELECT * FROM 表1 UNION ALL SELECT * FROM 表2;</code></li></ul></li><li><p>示例<br>① 创建表：<br><img src="MySQL-02/24.png" alt="01"><br>② UNION：<br><img src="MySQL-02/25.png" alt="01"><br>③ UNION ALL：<br><img src="MySQL-02/26.png" alt="01"></p></li><li><p>注意事项</p><blockquote><p>被合并的两个结果：列数、列类型必须相同。</p></blockquote></li></ul><h2 id="6-3-连接查询"><a href="#6-3-连接查询" class="headerlink" title="6.3 连接查询"></a>6.3 连接查询</h2><ul><li><p>(1) 什么是连接查询<br>也可以叫跨表查询，需要关联多个表进行查询</p></li><li><p>(2) 什么是笛卡尔集</p><p>假设集合A={a,b}，集合B={0,1,2}，</p><p>则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。</p><p>可以扩展到多个集合的情况</p><ul><li>同时查询两个表，出现的就是笛卡尔集结果：<br>例如查询下面2个表：<img src="MySQL-02/27.png" alt="01"><br>SQL语句：<code>SELECT * FROM stu,score;</code><br>查询时可以给表起别名：<code>SELECT * FROM stu st,score sc;</code></li></ul></li><li><p>(3) 多表联查，如何保证数据正确</p><ul><li>在查询时要把主键和外键保持一致<br><img src="MySQL-02/28.png" alt="01"></li><li>主表当中的数据参照子表当中的数据</li><li>原理<br>逐行判断，相等的留下，不相等的全不要<br><img src="MySQL-02/30.png" alt="01"></li></ul></li></ul><h3 id="6-3-1-内连接"><a href="#6-3-1-内连接" class="headerlink" title="6.3.1 内连接"></a>6.3.1 内连接</h3><ul><li><p>等值连接<br>两个表同时出现的id号（值）才显示<img src="MySQL-02/31.png" alt="01"></p><p>与多表联查约束主外键是一样，只是写法改变了。<br>ON后面只写主外键<br>如果还有条件直接在后面写where<br><img src="MySQL-02/32.png" alt="01"></p><p>多表联查后面还有条件就直接写and</p></li><li><p>多表连接<br>建立学生，分数，科目表<br><img src="MySQL-02/33.png" alt="01"><br>使用99连接法<br><img src="MySQL-02/34.png" alt="01"><br>使用内联查询<br><img src="MySQL-02/35.png" alt="01"></p></li><li><p>非等值连接</p><ul><li><p>示例表<br><img src="MySQL-02/36.png" alt="01"></p></li><li><p>建表语句<br>① 建立员工表**<code>emp</code>**：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `emp` (</span><br><span class="line">  `empno` int(11) NOT NULL,</span><br><span class="line">  `ename` varchar(255) DEFAULT NULL,</span><br><span class="line">  `job` varchar(255) DEFAULT NULL,</span><br><span class="line">  `mgr` varchar(255) DEFAULT NULL,</span><br><span class="line">  `hiredate` date DEFAULT NULL,</span><br><span class="line">  `salary` decimal(10,0) DEFAULT NULL,</span><br><span class="line">  `comm` double DEFAULT NULL,</span><br><span class="line">  `deptno` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`empno`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `emp` VALUES (7369, &#x27;孙悟空&#x27;, &#x27;职员&#x27;, &#x27;7902&#x27;, &#x27;2010-12-17&#x27;, 800, NULL, 20);</span><br><span class="line">INSERT INTO `emp` VALUES (7499, &#x27;孙尚香&#x27;, &#x27;销售人员&#x27;, &#x27;7698&#x27;, &#x27;2011-2-20&#x27;, 1600, 300, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7521, &#x27;李白&#x27;, &#x27;销售人员&#x27;, &#x27;7698&#x27;, &#x27;2011-2-22&#x27;, 1250, 500, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7566, &#x27;程咬金&#x27;, &#x27;经理&#x27;, &#x27;7839&#x27;, &#x27;2011-4-2&#x27;, 2975, NULL, 20);</span><br><span class="line">INSERT INTO `emp` VALUES (7654, &#x27;妲己&#x27;, &#x27;销售人员&#x27;, &#x27;7698&#x27;, &#x27;2011-9-28&#x27;, 1250, 1400, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7698, &#x27;兰陵王&#x27;, &#x27;经理&#x27;, &#x27;7839&#x27;, &#x27;2011-5-1&#x27;, 2854, NULL, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7782, &#x27;虞姬&#x27;, &#x27;经理&#x27;, &#x27;7839&#x27;, &#x27;2011-6-9&#x27;, 2450, NULL, 10);</span><br><span class="line">INSERT INTO `emp` VALUES (7788, &#x27;项羽&#x27;, &#x27;检查员&#x27;, &#x27;7566&#x27;, &#x27;2017-4-19&#x27;, 3000, NULL, 20);</span><br><span class="line">INSERT INTO `emp` VALUES (7839, &#x27;张飞&#x27;, &#x27;总裁&#x27;, NULL, &#x27;2010-6-12&#x27;, 5000, NULL, 10);</span><br><span class="line">INSERT INTO `emp` VALUES (7844, &#x27;蔡文姬&#x27;, &#x27;销售人员&#x27;, &#x27;7698&#x27;, &#x27;2011-9-8&#x27;, 1500, 0, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7876, &#x27;阿珂&#x27;, &#x27;职员&#x27;, &#x27;7788&#x27;, &#x27;2017-5-23&#x27;, 1100, NULL, 20);</span><br><span class="line">INSERT INTO `emp` VALUES (7900, &#x27;刘备&#x27;, &#x27;职员&#x27;, &#x27;7698&#x27;, &#x27;2011-12-3&#x27;, 950, NULL, 30);</span><br><span class="line">INSERT INTO `emp` VALUES (7902, &#x27;诸葛亮&#x27;, &#x27;检查员&#x27;, &#x27;7566&#x27;, &#x27;2011-12-3&#x27;, 3000, NULL, 20);</span><br><span class="line">INSERT INTO `emp` VALUES (7934, &#x27;鲁班&#x27;, &#x27;职员&#x27;, &#x27;7782&#x27;, &#x27;2012-1-23&#x27;, 1300, NULL, 10);</span><br></pre></td></tr></table></figure><p>② 建立部门表**<code>dept</code>**：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept` (</span><br><span class="line">  `deptno` bigint(2) NOT NULL AUTO_INCREMENT COMMENT &#x27;表示部门编号，由两位数字所组成&#x27;,</span><br><span class="line">  `dname` varchar(14) DEFAULT NULL COMMENT &#x27;部门名称，最多由14个字符所组成&#x27;,</span><br><span class="line">  `local` varchar(13) DEFAULT NULL COMMENT &#x27;部门所在的位置&#x27;,</span><br><span class="line">  PRIMARY KEY (`deptno`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `dept` VALUES (10, &#x27;财务部&#x27;, &#x27;北京&#x27;);</span><br><span class="line">INSERT INTO `dept` VALUES (20, &#x27;调研部&#x27;, &#x27;上海&#x27;);</span><br><span class="line">INSERT INTO `dept` VALUES (30, &#x27;销售部&#x27;, &#x27;王者峡谷&#x27;);</span><br><span class="line">INSERT INTO `dept` VALUES (40, &#x27;运营部&#x27;, &#x27;腾讯大楼&#x27;);</span><br></pre></td></tr></table></figure><p>③ 建立薪水表**<code>salgrade</code>**：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `salgrade` (</span><br><span class="line">  `grade` bigint(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;工资等级&#x27;,</span><br><span class="line">  `lowSalary` int(11) DEFAULT NULL COMMENT &#x27;此等级的最低工资&#x27;,</span><br><span class="line">  `highSalary` int(11) DEFAULT NULL COMMENT &#x27;此等级的最高工资&#x27;,</span><br><span class="line">  PRIMARY KEY (`grade`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `salgrade` VALUES (1, 700, 1200);</span><br><span class="line">INSERT INTO `salgrade` VALUES (2, 1201, 1400);</span><br><span class="line">INSERT INTO `salgrade` VALUES (3, 1401, 2000);</span><br><span class="line">INSERT INTO `salgrade` VALUES (4, 2001, 3000);</span><br><span class="line">INSERT INTO `salgrade` VALUES (5, 3001, 9999);</span><br></pre></td></tr></table></figure></li><li><p>查询所有员工的姓名，工资，所在部门的名称以及工资的等级<br>① 查询所有员工的姓名，工资</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">select ename,salary from emp;</span><br><span class="line">+--------+--------+</span><br><span class="line">| ename  | salary |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 孙悟空 |    800 |</span><br><span class="line">| 孙尚香 |   1600 |</span><br><span class="line">| 李白   |   1250 |</span><br><span class="line">| 程咬金 |   2975 |</span><br><span class="line">| 妲己   |   1250 |</span><br><span class="line">| 兰陵王 |   2854 |</span><br><span class="line">| 虞姬   |   2450 |</span><br><span class="line">| 项羽   |   3000 |</span><br><span class="line">| 张飞   |   5000 |</span><br><span class="line">| 蔡文姬 |   1500 |</span><br><span class="line">| 阿珂   |   1100 |</span><br><span class="line">| 刘备   |    950 |</span><br><span class="line">| 诸葛亮 |   3000 |</span><br><span class="line">| 鲁班   |   1300 |</span><br><span class="line">+--------+--------+</span><br><span class="line">14 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>② 查询所有员工的姓名，工资和所有部门</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">select e.ename,e.salary,d.dname from emp e JOIN dept d ON e.deptno = d.deptno;</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">| ename  | salary | dname  |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">| 孙悟空 |    800 | 调研部 |</span><br><span class="line">| 孙尚香 |   1600 | 销售部 |</span><br><span class="line">| 李白   |   1250 | 销售部 |</span><br><span class="line">| 程咬金 |   2975 | 调研部 |</span><br><span class="line">| 妲己   |   1250 | 销售部 |</span><br><span class="line">| 兰陵王 |   2854 | 销售部 |</span><br><span class="line">| 虞姬   |   2450 | 财务部 |</span><br><span class="line">| 项羽   |   3000 | 调研部 |</span><br><span class="line">| 张飞   |   5000 | 财务部 |</span><br><span class="line">| 蔡文姬 |   1500 | 销售部 |</span><br><span class="line">| 阿珂   |   1100 | 调研部 |</span><br><span class="line">| 刘备   |    950 | 销售部 |</span><br><span class="line">| 诸葛亮 |   3000 | 调研部 |</span><br><span class="line">| 鲁班   |   1300 | 财务部 |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>③ 查询所有员工的姓名，工资和所在部门及工资等级</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">select e.ename,e.salary,d.dname,g.grade FROM emp e</span><br><span class="line">JOIN dept d ON e.deptno = d.deptno</span><br><span class="line">JOIN salgrade g ON e.salary</span><br><span class="line">BETWEEN g.lowSalary AND g.highSalary;</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">| ename  | salary | dname  | grade |</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">| 孙悟空 |    800 | 调研部 |     1 |</span><br><span class="line">| 孙尚香 |   1600 | 销售部 |     3 |</span><br><span class="line">| 李白   |   1250 | 销售部 |     2 |</span><br><span class="line">| 程咬金 |   2975 | 调研部 |     4 |</span><br><span class="line">| 妲己   |   1250 | 销售部 |     2 |</span><br><span class="line">| 兰陵王 |   2854 | 销售部 |     4 |</span><br><span class="line">| 虞姬   |   2450 | 财务部 |     4 |</span><br><span class="line">| 项羽   |   3000 | 调研部 |     4 |</span><br><span class="line">| 张飞   |   5000 | 财务部 |     5 |</span><br><span class="line">| 蔡文姬 |   1500 | 销售部 |     3 |</span><br><span class="line">| 阿珂   |   1100 | 调研部 |     1 |</span><br><span class="line">| 刘备   |    950 | 销售部 |     1 |</span><br><span class="line">| 诸葛亮 |   3000 | 调研部 |     4 |</span><br><span class="line">| 鲁班   |   1300 | 财务部 |     2 |</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">14 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>也可以用以下SQL语句查询：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT e.ename,e.salary,d.dname,g.grade FROM emp e,dept d,salgrade g</span><br><span class="line">WHERE e.deptno = d.deptno</span><br><span class="line">AND e.salary &gt;= g.lowSalary AND e.salary &lt;= g.highSalary;</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">| ename  | salary | dname  | grade |</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">| 孙悟空 |    800 | 调研部 |     1 |</span><br><span class="line">| 孙尚香 |   1600 | 销售部 |     3 |</span><br><span class="line">| 李白   |   1250 | 销售部 |     2 |</span><br><span class="line">| 程咬金 |   2975 | 调研部 |     4 |</span><br><span class="line">| 妲己   |   1250 | 销售部 |     2 |</span><br><span class="line">| 兰陵王 |   2854 | 销售部 |     4 |</span><br><span class="line">| 虞姬   |   2450 | 财务部 |     4 |</span><br><span class="line">| 项羽   |   3000 | 调研部 |     4 |</span><br><span class="line">| 张飞   |   5000 | 财务部 |     5 |</span><br><span class="line">| 蔡文姬 |   1500 | 销售部 |     3 |</span><br><span class="line">| 阿珂   |   1100 | 调研部 |     1 |</span><br><span class="line">| 刘备   |    950 | 销售部 |     1 |</span><br><span class="line">| 诸葛亮 |   3000 | 调研部 |     4 |</span><br><span class="line">| 鲁班   |   1300 | 财务部 |     2 |</span><br><span class="line">+--------+--------+--------+-------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-3-2-外连接"><a href="#6-3-2-外连接" class="headerlink" title="6.3.2 外连接"></a>6.3.2 外连接</h3><ul><li><p>左外连接（左连接）</p><blockquote><p>两表满足条件相同的数据查出来，如果左边表当中有不相同的数据，也把左边表当中的数据查出来。<br><code>左边表当中的数据全部查出</code>，右边表当中，只查出满足条件的内容<br><img src="MySQL-02/39.png" alt="01"></p></blockquote><ul><li><p>使用<code>内连接</code>时，周七不会查出来，没有成绩，缺考了。即结果集中连周七这个人都没有了，不知道的还以为没有周七这个人，只把考过试的学生分数查出来了。</p><ul><li><p>① 使用条件查询</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT st.name,sc.score,sc.km FROM stu st,score sc</span><br><span class="line">WHERE st.id = sc.sid;</span><br><span class="line">+------+-------+------+</span><br><span class="line">| name | score | km   |</span><br><span class="line">+------+-------+------+</span><br><span class="line">| 张三 |    90 | 语文 |</span><br><span class="line">| 张三 |    60 | 数学 |</span><br><span class="line">| 李四 |    90 | 英语 |</span><br><span class="line">| 王五 |    70 | 数学 |</span><br><span class="line">| 赵六 |    60 | 语文 |</span><br><span class="line">+------+-------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>② 使用内连接查询</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT st.name,sc.score,sc.km FROM stu st</span><br><span class="line">INNER JOIN score sc ON st.id = sc.sid;</span><br><span class="line">+------+-------+------+</span><br><span class="line">| name | score | km   |</span><br><span class="line">+------+-------+------+</span><br><span class="line">| 张三 |    90 | 语文 |</span><br><span class="line">| 张三 |    60 | 数学 |</span><br><span class="line">| 李四 |    90 | 英语 |</span><br><span class="line">| 王五 |    70 | 数学 |</span><br><span class="line">| 赵六 |    60 | 语文 |</span><br><span class="line">+------+-------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>而使用<code>左外连接</code>查询所有学生及学生的考试分数时<br>左连接会把左表当中的数据全部查出，右表当中只查出满足条件的数据<br>可以省略OUTER不写<br>查询时，两个表可以不需要建立主外键约束</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 学生表为左表，分数表为右表</span><br><span class="line">mysql&gt; </span><br><span class="line">SELECT st.name,sc.score,sc.km FROM stu st</span><br><span class="line">LEFT OUTER JOIN score sc ON st.id = sc.sid;</span><br><span class="line">+------+-------+------+</span><br><span class="line">| name | score | km   |</span><br><span class="line">+------+-------+------+</span><br><span class="line">| 张三 |    90 | 语文 |</span><br><span class="line">| 张三 |    60 | 数学 |</span><br><span class="line">| 李四 |    90 | 英语 |</span><br><span class="line">| 王五 |    70 | 数学 |</span><br><span class="line">| 赵六 |    60 | 语文 |</span><br><span class="line">| 周七 |  NULL | NULL |</span><br><span class="line">+------+-------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>右外连接（右连接）</p><blockquote><p>右连接会把右表当中的数据全部查出，左表当中只查出满足条件的数据</p></blockquote><p>右边表当中的所有数据全部查出，左边表只查出满足条件的记录<br>站在表的角度去看，使用左连接就把左边表当中的内容全部查出，右边查出满足条件的。<br>使用右连接，就把右边表当中的数据全部查出。左边查出满足条件的。</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 学生表为左表，分数表为右表</span><br><span class="line">mysql&gt; </span><br><span class="line">SELECT st.name,sc.score,sc.km FROM stu st</span><br><span class="line">RIGHT JOIN score sc ON st.id = sc.sid;</span><br><span class="line">+------+-------+------+</span><br><span class="line">| name | score | km   |</span><br><span class="line">+------+-------+------+</span><br><span class="line">| 张三 |    90 | 语文 |</span><br><span class="line">| 张三 |    60 | 数学 |</span><br><span class="line">| 李四 |    90 | 英语 |</span><br><span class="line">| 王五 |    70 | 数学 |</span><br><span class="line">| 赵六 |    60 | 语文 |</span><br><span class="line">+------+-------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-3-3-自然连接"><a href="#6-3-3-自然连接" class="headerlink" title="6.3.3 自然连接"></a>6.3.3 自然连接</h3><blockquote><p>连接查询会产生无用笛卡尔集，我们通常使用主外键关系等式来去除它。<br>而自然连接无需你去给出主外键等式，它会自动找到这一等式，也就是说不用去写条件。</p></blockquote><ul><li>要求：<br>两张连接的表中列名称和类型完全一致的列作为条件<br>会去除相同的列</li></ul><h2 id="6-4-子查询"><a href="#6-4-子查询" class="headerlink" title="6.4 子查询"></a>6.4 子查询</h2><ul><li><p>什么是子查询</p><blockquote><p>一个select语句中包含另一个完整的select语句。<br>或两个以上SELECT，那么就是子查询语句了。</p></blockquote></li><li><p>子查询出现的位置</p><blockquote><p>where后，把select查询出的结果当作另一个select的条件值<br>from后，把查询出的结果当作一个新表；</p></blockquote></li><li><p>示例表：<br><img src="MySQL-02/41.png" alt="01"></p></li><li><p>使用：</p><ul><li><p><strong>查询与项羽同一个部门人员工</strong><br>1.先查出项羽所在的部门编号<br><code>SELECT deptno FROM emp WHERE ename = &#39;项羽&#39;;</code><br>2.再根据部门编号查同一部门的员工（把第1条查出来的结果当第2条语句的条件）</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT ename,deptno FROM emp</span><br><span class="line">WHERE deptno = (SELECT deptno FROM emp WHERE ename = &#x27;项羽&#x27;);</span><br><span class="line">+--------+--------+</span><br><span class="line">| ename  | deptno |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 孙悟空 |     20 |</span><br><span class="line">| 程咬金 |     20 |</span><br><span class="line">| 项羽   |     20 |</span><br><span class="line">| 阿珂   |     20 |</span><br><span class="line">| 诸葛亮 |     20 |</span><br><span class="line">+--------+--------+</span><br><span class="line">5 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询工资高于程咬金的员工</strong><br>1.查出程咬金的工资<br><code>SELECT salary FROM emp WHERE ename = &#39;程咬金&#39;;</code><br>2.再去根据查出的结果查询出大于该值的记录员工名称</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT ename,salary FROM emp</span><br><span class="line">WHERE salary &gt; (SELECT salary FROM emp WHERE ename = &#x27;程咬金&#x27;);</span><br><span class="line">+--------+--------+</span><br><span class="line">| ename  | salary |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 项羽   |   3000 |</span><br><span class="line">| 张飞   |   5000 |</span><br><span class="line">| 诸葛亮 |   3000 |</span><br><span class="line">+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询工资高于30号部门所有人的工资的员工信息</strong><br>1.先查出30号部门工资最高的那个人<br><code>SELECT MAX(salary) FROM emp WHERE deptno = 30;</code><br>2.再到整个表中查询大于30号部门最高工资的员工信息</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE salary &gt; (SELECT MAX(salary) FROM emp WHERE deptno = 30);</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | salary | comm | deptno |</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">|  7566 | 程咬金 | 经理   | 7839 | 2011-04-02 |   2975 | NULL |     20 |</span><br><span class="line">|  7788 | 项羽   | 检查员 | 7566 | 2017-04-19 |   3000 | NULL |     20 |</span><br><span class="line">|  7839 | 张飞   | 总裁   | NULL | 2010-06-12 |   5000 | NULL |     10 |</span><br><span class="line">|  7902 | 诸葛亮 | 检查员 | 7566 | 2011-12-03 |   3000 | NULL |     20 |</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询<code>工作和工资</code>与妲己完全相同的员工信息</strong><br>1.先查出妲已的<code>工作和工资</code><br><code>SELECT job,salary FROM emp WHERE ename = &#39;妲己&#39;;</code><br>2.根据查询结果当作条件再去查询<code>工作和工资</code>相同的员工<br>由于是两个条件，使用 IN进行判断</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT ename,job,salary FROM emp</span><br><span class="line">WHERE (job,salary) IN (SELECT job,salary FROM emp WHERE ename = &#x27;妲己&#x27;);</span><br><span class="line">+-------+----------+--------+</span><br><span class="line">| ename | job      | salary |</span><br><span class="line">+-------+----------+--------+</span><br><span class="line">| 李白  | 销售人员 |   1250 |</span><br><span class="line">| 妲己  | 销售人员 |   1250 |</span><br><span class="line">+-------+----------+--------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询有2个以上直接下属的员工信息</strong><br>1.对所有的上级编号进行分组</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT mgr,GROUP_CONCAT(mgr) FROM emp GROUP BY mgr;</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| mgr  | GROUP_CONCAT(mgr)        |</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| NULL | NULL                     |</span><br><span class="line">| 7566 | 7566,7566                |</span><br><span class="line">| 7698 | 7698,7698,7698,7698,7698 |</span><br><span class="line">| 7782 | 7782                     |</span><br><span class="line">| 7788 | 7788                     |</span><br><span class="line">| 7839 | 7839,7839,7839           |</span><br><span class="line">| 7902 | 7902                     |</span><br><span class="line">+------+--------------------------+</span><br><span class="line">7 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>2.找出大于2个的，大于2个说明有两个下属</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT mgr,GROUP_CONCAT(mgr) FROM emp GROUP BY mgr</span><br><span class="line">HAVING COUNT(*) &gt;= 2;</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| mgr  | GROUP_CONCAT(mgr)        |</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| 7566 | 7566,7566                |</span><br><span class="line">| 7698 | 7698,7698,7698,7698,7698 |</span><br><span class="line">| 7839 | 7839,7839,7839           |</span><br><span class="line">+------+--------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3.把上条的结果当作员工编号时行查询</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE empno IN (SELECT mgr FROM emp GROUP BY mgr HAVING COUNT(*) &gt;=2);</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+</span><br><span class="line">| empno | ename  | job  | mgr  | hiredate   | salary | comm | deptno |</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+</span><br><span class="line">|  7566 | 程咬金 | 经理 | 7839 | 2011-04-02 |   2975 | NULL |     20 |</span><br><span class="line">|  7698 | 兰陵王 | 经理 | 7839 | 2011-05-01 |   2854 | NULL |     30 |</span><br><span class="line">|  7839 | 张飞   | 总裁 | NULL | 2010-06-12 |   5000 | NULL |     10 |</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>查询员工编号为7788的员工名称、员工工资、部门名称、部门地址</strong></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT e.ename,e.salary,d.dname,d.local FROM emp e,dept d</span><br><span class="line">WHERE e.deptno = d.deptno</span><br><span class="line">AND empno = 7788;</span><br><span class="line">+-------+--------+--------+-------+</span><br><span class="line">| ename | salary | dname  | local |</span><br><span class="line">+-------+--------+--------+-------+</span><br><span class="line">| 项羽  |   3000 | 调研部 | 上海  |</span><br><span class="line">+-------+--------+--------+-------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="6-5-自连接"><a href="#6-5-自连接" class="headerlink" title="6.5 自连接"></a>6.5 自连接</h2><ul><li><p>求7369员工编号、姓名、经理编号和经理姓名</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE empno = (SELECT mgr FROM emp WHERE empno = 7369);</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | salary | comm | deptno |</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">|  7902 | 诸葛亮 | 检查员 | 7566 | 2011-12-03 |   3000 | NULL |     20 |</span><br><span class="line">+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>以上这种方法只能查询出一个经理的名称<br>自连接：自己连接自己，起别名<br><code>SELECT * FROM emp e1,emp e2 WHERE e1.mgr = e2.empno AND e1.empno = 7369;</code></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT * FROM emp e1,emp e2 WHERE e1.mgr = e2.empno AND e1.empno = 7369;</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">| empno | ename  | job  | mgr  | hiredate   | salary | comm | deptno | empno | ename  | job    | mgr  | hiredate   | salary | comm | deptno |</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">|  7369 | 孙悟空 | 职员 | 7902 | 2010-12-17 |    800 | NULL |     20 |  7902 | 诸葛亮 | 检查员 | 7566 | 2011-12-03 |   3000 | NULL |     20 |</span><br><span class="line">+-------+--------+------+------+------------+--------+------+--------+-------+--------+--------+------+------------+--------+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h1 id="七-常用函数"><a href="#七-常用函数" class="headerlink" title="七.常用函数"></a>七.常用函数</h1><ul><li>函数介绍<br>事先提供好的一些功能可以直接使用<br>函数可以用在SELECT语句及其子句<br>也可以用在UPDATE,DELETE语句当中。</li><li>函数分类<ul><li>字符串函数</li><li>数值函数</li><li>日期和时间函数</li><li>流程函数</li><li>其它函数</li></ul></li></ul><h2 id="7-1-字符串函数"><a href="#7-1-字符串函数" class="headerlink" title="7.1 字符串函数"></a>7.1 字符串函数</h2><ul><li><p><code>concat(s1,s2...sn)</code>：将传入的字符连接成一个字符串</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;);</span><br><span class="line">+---------------------------+</span><br><span class="line">| CONCAT(&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| aaabbbccc                 |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>任何字符串与null进行连接结果都是null</p></blockquote></li><li><p><code>insert(str,x,y,instr)</code>：将字符串str从x位置开始，y个字符长的子串替换为指定的字符</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT INSERT(&#x27;myxq123&#x27;,5,3,&#x27;lk&#x27;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| INSERT(&#x27;myxq123&#x27;,5,3,&#x27;lk&#x27;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| myxqlk                     |</span><br><span class="line">+----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>LOWER(Str)和UPPER(str)</code>：将字符串转成小写或大写</p></li><li><p><code>LEFT(str,x)和RIGHT(str，x)</code>：分别返回字符串最左边的x个字符和最右边的x个字符</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT LEFT(&#x27;shanghai&#x27;,3);</span><br><span class="line">+--------------------+</span><br><span class="line">| LEFT(&#x27;shanghai&#x27;,3) |</span><br><span class="line">+--------------------+</span><br><span class="line">| sha                |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT RIGHT(&#x27;shanghai&#x27;,3);</span><br><span class="line">+---------------------+</span><br><span class="line">| RIGHT(&#x27;shanghai&#x27;,3) |</span><br><span class="line">+---------------------+</span><br><span class="line">| hai                 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>如果第二个参数为null，那么不返回任何字符</p></blockquote></li><li><p><code>LPAD（str,n,pad）和RPAD(str,n,pad)</code>：用字符串pad对str最左边或最右边进行填充，直接到长度为n个字符长度</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT LPAD(&#x27;my&#x27;,5,123456);</span><br><span class="line">+---------------------+</span><br><span class="line">| LPAD(&#x27;my&#x27;,5,123456) |</span><br><span class="line">+---------------------+</span><br><span class="line">| 123my               |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT RPAD(&#x27;my&#x27;,6,123456);</span><br><span class="line">+---------------------+</span><br><span class="line">| RPAD(&#x27;my&#x27;,6,123456) |</span><br><span class="line">+---------------------+</span><br><span class="line">| my1234              |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>LTRIM(str)和RTRIM(str)</code>：去掉字符串当中最左侧和最右侧的空格</p></li><li><p><code>TRIM(str)</code>：去掉字符串左右的空格</p></li><li><p><code>REPEAT(str,x)</code>：返回str重复x次的结果</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT repeat(&#x27;mysql&#x27;,10);</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| repeat(&#x27;mysql&#x27;,10)                                 |</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">| mysqlmysqlmysqlmysqlmysqlmysqlmysqlmysqlmysqlmysql |</span><br><span class="line">+----------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>REPLACE(str,a,b)</code>：用字符串b替换字符串str中所有出现的字符串a.</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT replace(&#x27;myxqx&#x27;,&#x27;x&#x27;,&#x27;q&#x27;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| replace(&#x27;myxqx&#x27;,&#x27;x&#x27;,&#x27;q&#x27;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| myqqq                    |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSTRING(str,x,y)</code>：返回字符串str中第x位置起y个字符长度的字符</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT substr(&#x27;myxq&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);</span><br><span class="line">+------------------------+</span><br><span class="line">| substr(&#x27;myxq&#x27;,&#x27;2&#x27;,&#x27;3&#x27;) |</span><br><span class="line">+------------------------+</span><br><span class="line">| yxq                    |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-2-数值函数"><a href="#7-2-数值函数" class="headerlink" title="7.2 数值函数"></a>7.2 数值函数</h2><ul><li><code>ABS(x)</code>：返回X的绝对值</li><li><code>CEIL(x)</code>：小数不为零部分上取整，即向上取最近的整数</li><li><code>FLOOR(x)</code>：小数部分下取整，即向下取最近的整数</li><li><code>MOD(X,Y)</code>：返回X/Y的模</li><li><code>RAND()</code>：返回0-1内容的随机值</li></ul><h2 id="7-3-日期和时间函数"><a href="#7-3-日期和时间函数" class="headerlink" title="7.3 日期和时间函数"></a>7.3 日期和时间函数</h2><ul><li><p><code>CURDATE()</code>：返回当前日期，只包含年月日</p></li><li><p><code>CURTIME()</code>：返回当前时间，只包含时分秒</p></li><li><p><code>NOW()</code>：返回当前日期和时间，年月日时分秒都包含</p></li><li><p><code>UNIX_TIMESTAMP</code>：返回当前日期的时间戳</p></li><li><p><code>FROM_UNIXTIME(unixtime)</code>：将一个时间戳转换成日期</p></li><li><p><code>WEEK(DATE)</code>：返回当前是一年中的第几周</p></li><li><p><code>YEAR(DATE)</code>：返回所给日期是那一年</p></li><li><p><code>HOUR(TIME)</code>：返回当前时间的小时</p></li><li><p><code>MINUTE(TIME)</code>：返回当前时间的分钟</p></li><li><p><code>DATE_FORMAT(date,fmt)</code>：按字符串格式化日期date值</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">SELECT DATE_FORMAT(now(),&#x27;%M,%D,%Y&#x27;);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| DATE_FORMAT(now(),&#x27;%M,%D,%Y&#x27;) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| August,2nd,2019               |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>DATE_ADD(date,interval expr type)</code>：计算日期间隔</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_ADD(now(),interval 31 day);</span><br><span class="line">+---------------------------------+</span><br><span class="line">| DATE_ADD(now(),interval 31 day) |</span><br><span class="line">+---------------------------------+</span><br><span class="line">| 2019-09-02 18:36:32             |</span><br><span class="line">+---------------------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></li><li><p><code>DATEDIFF(date1,date2)</code>：计算两个日期相差的天数</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DATEDIFF(&#x27;2018-01-01&#x27;,now());</span><br><span class="line">+------------------------------+</span><br><span class="line">| DATEDIFF(&#x27;2018-01-01&#x27;,now()) |</span><br><span class="line">+------------------------------+</span><br><span class="line">|                         -578 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-4-流程函数"><a href="#7-4-流程函数" class="headerlink" title="7.4 流程函数"></a>7.4 流程函数</h2><ul><li><p>IF(value,a,b)<br>如果value是真，返回a,否则返回b</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT IF(2&gt;3,&#x27;是&#x27;,&#x27;否&#x27;);</span><br><span class="line">+-------------------+</span><br><span class="line">| IF(2&gt;3,&#x27;是&#x27;,&#x27;否&#x27;) |</span><br><span class="line">+-------------------+</span><br><span class="line">| 否                |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>IFNULL(value1,value2)<br>如果value1不为空，返回value1否者返回value2</p></li><li><p>CASE WHEN THEN END</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT case when 2&gt;3 then &#x27;对&#x27; else &#x27;错&#x27; end;</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| case when 2&gt;3 then &#x27;对&#x27; else &#x27;错&#x27; end |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| 错                                    |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-5-其他常用函数"><a href="#7-5-其他常用函数" class="headerlink" title="7.5 其他常用函数"></a>7.5 其他常用函数</h2><ul><li><code>DATABASE()</code>：返回当前数据库名</li><li><code>VERSION()</code>：返回当前数据库版本</li><li><code>USER()</code>：返回当前登陆用户名</li><li><code>PASSWORD(STR)</code>：对str进行加密</li><li><code>MD5()</code>：返回str的MD5值</li></ul><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL知识笔记（一）</title>
      <link href="/2021/10/09/MySQL-01/"/>
      <url>/2021/10/09/MySQL-01/</url>
      
        <content type="html"><![CDATA[<h1 id="一-数据库介绍"><a href="#一-数据库介绍" class="headerlink" title="一. 数据库介绍"></a>一. 数据库介绍</h1><blockquote><p>　数据库是按照数据结构来组织、存储和管理数据的仓库</p></blockquote><h2 id="1-1-数据库管理系统DBMS"><a href="#1-1-数据库管理系统DBMS" class="headerlink" title="1.1 数据库管理系统DBMS"></a>1.1 数据库管理系统DBMS</h2><p>　　一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS。<br>　　它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性。<br>　　用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作。<br>　　数据库管理系统是数据库系统的核心，是管理数据库的软件。<br>　　我们一般说的数据库，就是指的DBMS: 数据库服务器</p><h2 id="1-2-常见的数据库"><a href="#1-2-常见的数据库" class="headerlink" title="1.2 常见的数据库"></a>1.2 常见的数据库</h2><ul><li>Oracle:<br>　　运行稳定，可移植性高，功能齐全，性能超群！适用于大型企业领域。</li><li>DB2:<br>　　速度快、可靠性好，适于海量数据，恢复性极强。适用于大中型企业领域。</li><li>MySQL:<br>　　开源，体积小，速度快。适用于于中小型企业领域。</li><li>SQL Server:<br>　　全面，效率高，界面友好，操作容易，但是不跨平台。适用于于中小型企业领域。</li></ul><h2 id="1-3-结构化查询语言SQL"><a href="#1-3-结构化查询语言SQL" class="headerlink" title="1.3 结构化查询语言SQL"></a>1.3 结构化查询语言SQL</h2><p>　　SQL是Structured Quevy Language(结构化查询语言)的缩写。<br>　　SQL语言的功能包括查询、操纵、定义和控制，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做。</p><ul><li>sql功能分类<ul><li>DDL:数据定义语言<br>用来定义数据库对象：创建库，表，列等。</li><li>DML：数据操作语言<br>用来操作数据库表中的记录</li><li>DQL：数据查询语言<br>用来查询数据</li><li>DCL：数据控制语言<br>用来定义访问权限和安全级别</li></ul></li></ul><h2 id="1-4-非关系型数据库NoSql"><a href="#1-4-非关系型数据库NoSql" class="headerlink" title="1.4 非关系型数据库NoSql"></a>1.4 非关系型数据库NoSql</h2><p>　　例如：MongoDB,Redis,HBase…</p><h1 id="二-MySQL数据库"><a href="#二-MySQL数据库" class="headerlink" title="二. MySQL数据库"></a>二. MySQL数据库</h1><h2 id="2-1-MySql介绍"><a href="#2-1-MySql介绍" class="headerlink" title="2.1 MySql介绍"></a>2.1 MySql介绍</h2><ul><li>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>Mysql是开源的，所以你不需要支付额外的费用。</li><li>Mysql支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL使用标准的SQL数据语言形式。</li><li>Mysql可以允许于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等。</li></ul><h2 id="2-2-MySql的存储引擎"><a href="#2-2-MySql的存储引擎" class="headerlink" title="2.2 MySql的存储引擎"></a>2.2 MySql的存储引擎</h2><h3 id="2-2-1-什么是存储引擎"><a href="#2-2-1-什么是存储引擎" class="headerlink" title="2.2.1 什么是存储引擎"></a>2.2.1 什么是存储引擎</h3><p>　　MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。<br>　　不同的存储引擎性能是不一样的。</p><h3 id="2-2-2-存储引擎分类"><a href="#2-2-2-存储引擎分类" class="headerlink" title="2.2.2 存储引擎分类"></a>2.2.2 存储引擎分类</h3><ul><li><p>MYISAM：</p><p>它不支持事务，也不支持外键，尤其是访问速度快，对事务完整性没有要求或者以SELECT、INSERT为主的应用基本都可以使用这个引擎来创建表。</p><p>每个MyISAM在磁盘上存储成3个文件，其中文件名和表名都相同，但是扩展名分别为：</p><blockquote><p>.frm(存储表定义)<br>MYD(MYData，存储数据)<br>MYI(MYIndex，存储索引)</p></blockquote></li><li><p>INNODB：<br>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</p></li><li><p>MEMORY：<br>memory使用存在内存中的内容来创建表。每个MEMORY表实际对应一个磁盘文件，格式是.frm<br>MEMORY类型的表访问非常快，因为它到数据是放在内存中的，并且默认使用HASH索引，但是一旦服务器关闭，表中的数据就会丢失，但表还会继续存在。</p></li></ul><h2 id="2-3-常用数据库命令"><a href="#2-3-常用数据库命令" class="headerlink" title="2.3 常用数据库命令"></a>2.3 常用数据库命令</h2><ul><li>MySql数据库分为两种：<br>(1)系统数据库（数据库服务器自带的，自带的4个）<br>　　information_schema:存储数据库对象信息如用户表信息,列信息,根除,字符,分区里面的内容我们不能动<br>　　performance_schema:存储数据库服务器性能参数信息<br>　　mysql:存储数据库用户权限信息<br>　　sys:通过这个库可以快速的了解系统的元数据信息，<br>(2)用户数据库<br>　　用户自己创建的数据库,一个项目用一个数据库</li><li>创建数据库<br>create database 数据库名称;</li><li>删除数据库<br>drop database 数据库名称;</li><li>查看数据库<br>show databases;</li><li>使用数据库<br>use 数据库名;</li><li>查看数据库当中有多少张表<br>show tables;</li><li>注意写的顺序,先使用数据库,再去查有多少张表</li></ul><p>　</p><h1 id="三-MySQL数据类型"><a href="#三-MySQL数据类型" class="headerlink" title="三. MySQL数据类型"></a>三. MySQL数据类型</h1><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。<br>MySQL支持所有标准SQL数值数据类型。</p><h2 id="3-1-数据类型分类"><a href="#3-1-数据类型分类" class="headerlink" title="3.1 数据类型分类"></a>3.1 数据类型分类</h2><p>MySQL支持多种类型，大致可以分为三类：</p><ul><li><strong>数值类型：</strong><img src="MySQL-01/01.png" alt="01"></li><li><strong>字符串类型：</strong><img src="MySQL-01/02.png" alt="02"></li><li><strong>日期和时间类型：</strong><img src="MySQL-01/03.png" alt="03"></li></ul><h2 id="3-2-常用数据类型"><a href="#3-2-常用数据类型" class="headerlink" title="3.2 常用数据类型"></a>3.2 常用数据类型</h2><ul><li>double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</li><li>char：固定长度字符串类型； char(10) ‘abc ‘</li><li>varchar：可变长度字符串类型；varchar(10) ‘abc’</li><li>text：字符串类型;</li><li>blob：二进制类型；</li><li>date：日期类型，格式为：yyyy-MM-dd；</li><li>time：时间类型，格式为：hh:mm:ss</li><li>datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</li></ul><blockquote><p>在mysql中，字符串类型和日期类型都要用单引号括起来。如： ‘Myxq’ ‘2020-01-01’</p></blockquote><h1 id="四-SQL基础"><a href="#四-SQL基础" class="headerlink" title="四. SQL基础"></a>四. SQL基础</h1><h2 id="4-1-DDL数据定义语言"><a href="#4-1-DDL数据定义语言" class="headerlink" title="4.1 DDL数据定义语言"></a>4.1 DDL数据定义语言</h2><ul><li>创建数据库<br><code>create database 数据库名 character set utf8;</code></li><li>修改数据库<br><code>alter database 数据库名 charactor set gbk;</code></li><li>创建学生表<br><img src="MySQL-01/04.png" alt="04"></li><li>添加一列<br><code>ALTER TABLE 表名 ADD 列名 数据类型;</code></li><li>查看表的字段信息<br><code>DESC 表名;</code></li><li>修改一个表的字段类型<br><code>ALTER TABLE 表名 MODIFY 字段名 数据类型;</code></li><li>删除一列<br><code>ALTER TABLE 表名 DROP 字段名;</code></li><li>修改表名<br><code>RENAME TABLE 原始表名 TO 要修改的表名;</code></li><li>查看表的创建细节<br><code>SHOW CREATE TABLE 表名;</code></li><li>修改表的字符集为gbk<br><code>ALTER TABLE 表名 CHARACTER SET 字符集名称;</code></li><li>修改表的列名<br><code>ALTER TABLE 表名 CHANGE 原始列名 新列名 数据类型;</code></li><li>删除表<br><code>DROP TABLE 表名;</code></li></ul><h2 id="4-2-DML数据操作语言"><a href="#4-2-DML数据操作语言" class="headerlink" title="4.2 DML数据操作语言"></a>4.2 DML数据操作语言</h2><blockquote><p>DML是对表中的数据进行增、删、改的操作</p></blockquote><h3 id="4-2-1-插入操作"><a href="#4-2-1-插入操作" class="headerlink" title="4.2.1 插入操作"></a>4.2.1 插入操作</h3><ul><li><p>```<br>INSERT INTO 表名（列名1，列名2 …）VALUE (列值1，列值2…);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 注意事项：</span><br><span class="line">    列名与列值的类型、个数、顺序要一一对应。</span><br><span class="line">    值不要超出列定义的长度。</span><br><span class="line">    插入的日期和字符一样，都使用引号括起来。</span><br><span class="line"></span><br><span class="line">- 批量插入</span><br><span class="line">  `INSERT INTO 表名（列名1，列名2 ...）VALUES (列值1，列值2...)，(列值1，列值2...);`</span><br><span class="line"></span><br><span class="line">### 4.2.2 更新操作</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值</span><br></pre></td></tr></table></figure><ul><li>把所有学生的分数改为90：<br>update students set score=90</li><li>把姓名为zs的学生分数改为60：<br>update student set score=60 where name=’zs’;</li><li>把姓名为李四的年龄改为20和分数改为70：<br>update student set age=20,score=70 where name=’ls’;</li><li>把wc的年龄在原来基础上加1岁：<br>update students set age=age+1 where name=’wc’;</li><li>修改数据库密码：<br>use mysql;<br>update user set password=password(‘abc’) WHERE User=’root’;<br>update mysql.user set authentication_string=password(‘123456’) where user=’root’ and Host = ‘localhost’;<br>flush privileges; //刷新MySQL的系统权限相关表<br>mysqladmin -u root -p password 12356</li></ul></li></ul><h3 id="4-2-3-删除操作"><a href="#4-2-3-删除操作" class="headerlink" title="4.2.3 删除操作"></a>4.2.3 删除操作</h3><ul><li><code>DELETE FROM 表名 【WHERE 列名=值】</code></li><li><code>TRUNCATE TABLE 表名;</code></li><li>DELETED 与TRUNCATE的区别：<ul><li>DELETE 删除表中的数据，表结构还在;删除后的数据可以找回</li><li>TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。删除的数据不能找回。执行速度比DELETE快。</li></ul></li></ul><h2 id="4-3-DQL数据查询语言"><a href="#4-3-DQL数据查询语言" class="headerlink" title="4.3 DQL数据查询语言"></a>4.3 DQL数据查询语言</h2><p>查询所有列：<code>SELECT * FROM 表名;</code><br>查询指定列的数据：<code>SELECT 列名1，列表2... FROM 表名;</code></p><h3 id="4-3-1-结果集"><a href="#4-3-1-结果集" class="headerlink" title="4.3.1 结果集"></a>4.3.1 结果集</h3><p>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。<br>结果集：<br>　　　　通过查询语句查询出来的数据以表的形式展示我们称这个表为虚拟结果集。存放在内存中。<br>　　　　查询返回的结果集是一张虚拟表。</p><h3 id="4-3-2-条件查询"><a href="#4-3-2-条件查询" class="headerlink" title="4.3.2 条件查询"></a>4.3.2 条件查询</h3><blockquote><p>条件查询就是在查询时给出WHERE子句，在WHERE子句中可以使用一些运算符及关键字。</p></blockquote><ul><li><p>条件查询运行符及关键字:<br><code>=（等于）、!=（不等于）、&lt;&gt;（不等于）、&lt;（小于）、&lt;=（小于等于）、&gt;（大于）、&gt;=（大于等于）；</code><br><code>BETWEEN…AND；值在什么范围</code><br><code>IN(set)；固定的范围值</code><br><code>IS NULL；（为空） IS NOT NULL（不为空）</code><br><code>AND；与</code><br><code>OR；或</code><br><code>NOT； 非</code></p></li><li><p>使用:</p><p>查询性别为男，并且年龄为20的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE gender=&#x27;男&#x27; AND age=20;</span><br></pre></td></tr></table></figure><p>查询学号为1001 或者 名为zs的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE id =&#x27;1001&#x27; OR name=&#x27;zs&#x27;;</span><br></pre></td></tr></table></figure><p>查询学号为1001，1002，1003的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE id=&#x27;1001&#x27; OR id=&#x27;1002&#x27; OR 1001=&#x27;1003&#x27;;</span><br><span class="line">SELECT * FROM students WHERE id  IN(&#x27;1001&#x27;,&#x27;1002&#x27;,&#x27;1003&#x27;);</span><br><span class="line">SELECT * FROM students WHERE id NOT IN (&#x27;1001&#x27;,&#x27;1002&#x27;,&#x27;1003&#x27;);</span><br></pre></td></tr></table></figure><p>查询年龄为null的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE age IS NULL;</span><br></pre></td></tr></table></figure><p>查询年龄在18到20之间的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE age&gt;=18 AND age&lt;=20;</span><br><span class="line">SELECT * FROM students WHERE age BETWEEN 18 AND 20;</span><br></pre></td></tr></table></figure><p>查询性别非男的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE gender !=&#x27;男&#x27;;</span><br></pre></td></tr></table></figure><p>查询姓名不为null的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE  name IS NOT  NULL;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-3-模糊查询"><a href="#4-3-3-模糊查询" class="headerlink" title="4.3.3 模糊查询"></a>4.3.3 模糊查询</h3><blockquote><p>根据指定的关键进行查询<br>使用LIKE关键字后跟通配符</p></blockquote><ul><li><p>通配符：<br><code>_ ：任意一个字符</code><br><code>%：任意0~n个字符</code></p></li><li><p>使用：</p><p>查询姓名由5个字母构成的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE &#x27;_____&#x27;;</span><br><span class="line">模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。</span><br></pre></td></tr></table></figure><p>查询姓名由5个字母构成，并且第5个字母为“s”的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE &#x27;____s&#x27;;</span><br></pre></td></tr></table></figure><p>查询姓名以“m”开头的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE &#x27;m%&#x27;;</span><br><span class="line">其中“%”匹配0~n个任何字母。</span><br></pre></td></tr></table></figure><p>查询姓名中第2个字母为“u”的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE &#x27;_u%&#x27;;</span><br></pre></td></tr></table></figure><p>查询姓名中包含“s”字母的学生记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE name LIKE &#x27;%s%&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-4-字段控制查询"><a href="#4-3-4-字段控制查询" class="headerlink" title="4.3.4 字段控制查询"></a>4.3.4 字段控制查询</h3><ul><li>去除重复记录<br><code>SELECT DISTINCT name FROM students;</code></li><li>把查询字段的结果进行运算，必须都要是数据型<br><code>SELECT *,字段1+字段2 FROM 表名;</code><br>列有很多记录的值为NULL，<br>因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。<br>下面使用了把NULL转换成数值0的函数IFNULL：<br><code>SELECT *,age+IFNULL(score,0) FROM students;</code></li><li>对查询结果起别名<br>在上面查询中出现列名为sx+IFNULL(yw,0)，这很不美观，现在我们给这一列给出一个别名，为total：<br><code>SELECT *, yw+IFNULL(sx,0) AS total FROM score;</code><br>省略 AS <code>SELECT *, yw+IFNULL(sx,0) total FROM score;</code></li></ul><h3 id="4-3-5-排序"><a href="#4-3-5-排序" class="headerlink" title="4.3.5 排序"></a>4.3.5 排序</h3><blockquote><p>对查询的结果进行排序<br>使用关键字ORDER BY</p></blockquote><ul><li><p>排序类型<br>升序ASC：从小到大 默认<br>降序DESC：从大到小</p></li><li><p>创建案例表：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(50) DEFAULT NULL,</span><br><span class="line">  `gender` varchar(1) DEFAULT NULL,</span><br><span class="line">  `hire_date` date DEFAULT NULL,</span><br><span class="line">  `salary` decimal(10,0) DEFAULT NULL,</span><br><span class="line">  `performance` double(255,0) DEFAULT NULL,</span><br><span class="line">  `manage` double(255,0) DEFAULT NULL,</span><br><span class="line">  `department` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `employee` VALUES (1001, &#x27;张三&#x27;, &#x27;男&#x27;, &#x27;1991-7-25&#x27;, 2000, 200, 500, &#x27;营销部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1002, &#x27;李四&#x27;, &#x27;男&#x27;, &#x27;2017-7-5&#x27;, 4000, 500, NULL, &#x27;营销部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1003, &#x27;王五&#x27;, &#x27;女&#x27;, &#x27;2018-5-1&#x27;, 6000, 100, 5000, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1004, &#x27;赵六&#x27;, &#x27;男&#x27;, &#x27;1991-6-1&#x27;, 1000, 3000, 4000, &#x27;财务部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1005, &#x27;孙七&#x27;, &#x27;女&#x27;, &#x27;2018-3-23&#x27;, 8000, 1000, NULL, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1006, &#x27;周八&#x27;, &#x27;男&#x27;, &#x27;2010-9-8&#x27;, 5000, 500, 1000, &#x27;人事部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1007, &#x27;吴九&#x27;, &#x27;女&#x27;, &#x27;2017-7-5&#x27;, 8000, 601, NULL, &#x27;研发部&#x27;);</span><br><span class="line">INSERT INTO `employee` VALUES (1008, &#x27;郑十&#x27;, &#x27;女&#x27;, &#x27;2014-4-6&#x27;, 4000, 1801, NULL, &#x27;人事部&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>使用：<br>对所有员工的薪水进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *FROM employee ORDER BY age ASC;</span><br></pre></td></tr></table></figure><p>查询所有学生记录，按年龄降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employee ORDER BY age DESC;</span><br></pre></td></tr></table></figure><p>查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employee ORDER BY salary DESC, id ASC;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-6-聚合函数"><a href="#4-3-6-聚合函数" class="headerlink" title="4.3.6 聚合函数"></a>4.3.6 聚合函数</h3><blockquote><p>对查询的结果进行统计计算</p></blockquote><ul><li><p>常用聚合函数</p><ul><li>COUNT()：统计指定列不为NULL的记录行数；</li><li>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</li><li>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</li></ul></li><li><p>使用</p><blockquote><p><strong><code>COUNT:</code></strong><br>查询employee表中记录数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) AS total_record FROM employee;</span><br></pre></td></tr></table></figure><p>查询员工表中有绩效的人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(performance)  FROM employee;</span><br></pre></td></tr></table></figure><p>查询员工表中月薪大于2500的人数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM employee WHERE salary &gt; 2500;</span><br></pre></td></tr></table></figure><p>统计月薪与绩效之和大于5000元的人数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*)  FROM employee WHERE salary+IFNULL(performance,0) &gt; 5000;</span><br></pre></td></tr></table></figure><p>查询有绩效的人数，和有管理费的人数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(performance), COUNT(manage) FROM employee;</span><br></pre></td></tr></table></figure><p><strong><code>SUM和AVG:</code></strong><br>查询所有雇员月薪和：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary) FROM employee;</span><br></pre></td></tr></table></figure><p>查询所有雇员月薪和，以及所有雇员绩效和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary), SUM(performance) FROM employee;</span><br></pre></td></tr></table></figure><p>查询所有雇员月薪+绩效和：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary+IFNULL(performance,0)) FROM employee;</span><br></pre></td></tr></table></figure><p>统计所有员工平均工资：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary) FROM employee;</span><br></pre></td></tr></table></figure><p><strong><code>MAX和MIN:</code></strong><br>查询最高工资和最低工资：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary), MIN(salary) FROM employee;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>————————————–本文结束感谢您的阅读————————————–</p><ul><li><strong>本文作者：</strong> Icodezhan</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/2021/10/09/MyBatis%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/10/09/MyBatis%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架概述"><a href="#MyBatis框架概述" class="headerlink" title="MyBatis框架概述"></a>MyBatis框架概述</h1><p>　　mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>　　mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p><p>　　采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</p><h2 id="1-JDBC编程的分析"><a href="#1-JDBC编程的分析" class="headerlink" title="1. JDBC编程的分析"></a>1. JDBC编程的分析</h2><h3 id="1-1-jdbc程序的回顾："><a href="#1-1-jdbc程序的回顾：" class="headerlink" title="1.1 jdbc程序的回顾："></a>1.1 jdbc程序的回顾：</h3><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>; </span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>; </span><br><span class="line">ResultSet resultSet = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"><span class="comment">//加载数据库驱动 </span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line"><span class="comment">//通过驱动管理类获取数据库链接 </span></span><br><span class="line">connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>); </span><br><span class="line"><span class="comment">//定义sql语句 ?表示占位符 </span></span><br><span class="line">String sql = <span class="string">&quot;select * from user where username = ?&quot;</span>;</span><br><span class="line"><span class="comment">//获取预处理</span></span><br><span class="line">statement preparedStatement = connection.prepareStatement(sql); </span><br><span class="line"><span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值 </span></span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;王五&quot;</span>); </span><br><span class="line"><span class="comment">//向数据库发出sql执行查询，查询出结果集 </span></span><br><span class="line">resultSet = preparedStatement.executeQuery(); </span><br><span class="line"><span class="comment">//遍历查询结果集 </span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123; </span><br><span class="line">System.out.println(resultSet.getString(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>+resultSet.getString(<span class="string">&quot;username&quot;</span>)); </span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123; </span><br><span class="line"><span class="comment">//释放资源 </span></span><br><span class="line"><span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">resultSet.close(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">preparedStatement.close(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">connection.close(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边使用jdbc的原始方法（未经封装）实现了查询数据库表记录的操作。</p><h3 id="1-2-jdbc问题分析："><a href="#1-2-jdbc问题分析：" class="headerlink" title="1.2 jdbc问题分析："></a>1.2 jdbc问题分析：</h3><p>上面代码有如下几个问题：</p><ul><li>数据库连接，使用时创建，不使用就关闭，对数据库进行频繁连接开启和关闭，造成数据库资源的浪费<ul><li>解决：使用数据库连接池管理数据库连接</li></ul></li><li>将sql 语句硬编码到Java代码中，如果sql语句修改，需要对java代码重新编译，不利于系统维护<ul><li>解决：将sql语句设置在xml配置文件中，即使sql变化，也无需重新编译</li></ul></li><li>向preparedStatement中设置参数，对占位符位置和设置参数值，硬编码到Java文件中，不利于系统维护<ul><li>解决：将sql语句及占位符，参数全部配置在xml文件中</li></ul></li><li>从resutSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护。<ul><li>解决：将查询的结果集，自动映射成java对象</li></ul></li></ul><h2 id="2-搭建Mybatis开发环境"><a href="#2-搭建Mybatis开发环境" class="headerlink" title="2. 搭建Mybatis开发环境"></a>2. 搭建Mybatis开发环境</h2><h3 id="2-1-创建Maven工程"><a href="#2-1-创建Maven工程" class="headerlink" title="2.1 创建Maven工程"></a>2.1 创建Maven工程</h3><blockquote><p>创建 mybatis01 的工程，工程信息如下：<br>Groupid:com.zhan<br>ArtifactId:mybatis_start<br>Packing:jar</p></blockquote><h3 id="2-2-添加Mybatis3-4-5的坐标"><a href="#2-2-添加Mybatis3-4-5的坐标" class="headerlink" title="2.2 添加Mybatis3.4.5的坐标"></a>2.2 添加Mybatis3.4.5的坐标</h3><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-实体类和持久层接口"><a href="#2-3-实体类和持久层接口" class="headerlink" title="2.3 实体类和持久层接口"></a>2.3 实体类和持久层接口</h3><h3 id="2-4-编写SqlMapConfig-xml配置文件"><a href="#2-4-编写SqlMapConfig-xml配置文件" class="headerlink" title="2.4 编写SqlMapConfig.xml配置文件"></a>2.4 编写SqlMapConfig.xml配置文件</h3><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 mybatis 的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 mysql 的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/holicCode/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-编写映射配置文件-或使用注解"><a href="#2-5-编写映射配置文件-或使用注解" class="headerlink" title="2.5 编写映射配置文件(或使用注解)"></a>2.5 编写映射配置文件(或使用注解)</h3><h3 id="2-6-编写测试类"><a href="#2-6-编写测试类" class="headerlink" title="2.6 编写测试类"></a>2.6 编写测试类</h3><h2 id="3-Mybatis中用到的设计模式"><a href="#3-Mybatis中用到的设计模式" class="headerlink" title="3. Mybatis中用到的设计模式"></a>3. Mybatis中用到的设计模式</h2><blockquote><p>工厂模式（SqlSessionFactory）<br>代理模式(MapperProxyFactory)<br>构建者模式(SqlSessionFactoryBuilder)</p></blockquote><h2 id="4-Mybatis与JDBC编程的比较"><a href="#4-Mybatis与JDBC编程的比较" class="headerlink" title="4. Mybatis与JDBC编程的比较"></a>4. Mybatis与JDBC编程的比较</h2><ul><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。<ul><li>解决：在 SqlMapConfig.xml 中配置数据链接池，使用连接池管理数据库链接。</li></ul></li><li>Sql 语句写在代码中造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码。<ul><li>解决：将 Sql 语句配置在 XXXXmapper.xml 文件中与 java 代码分离。</li></ul></li><li>向 sql 语句传参数麻烦，因为 sql 语句的 where 条件不一定，可能多也可能少，占位符需要和参数对应。<ul><li>解决：Mybatis 自动将 java 对象映射至 sql 语句，通过 statement 中的 parameterType 定义输入参数的类型。</li></ul></li><li>对结果集解析麻烦，sql 变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成 pojo 对象解析比较方便。<ul><li>解决：Mybatis 自动将 sql 执行结果映射至 java 对象，通过 statement 中的resultType 定义输出结果的类型。</li></ul></li></ul><h2 id="6-Mybatis连接池"><a href="#6-Mybatis连接池" class="headerlink" title="6.Mybatis连接池"></a>6.Mybatis连接池</h2><p>　　Mybatis连接池与web中的连接池不同,Mybatis中的连接池使用的自己的连接池技术,在Mybatis的SqlMapConfig.xml配置文件中,通过来实现Mybatis中连接池的配置。</p><h3 id="6-1Mybatis连接池的分类"><a href="#6-1Mybatis连接池的分类" class="headerlink" title="6.1Mybatis连接池的分类"></a>6.1Mybatis连接池的分类</h3><blockquote><p>UNPOOLED 不使用连接池的数据源<br>POOLED 使用连接池的数据源（我们一般使用的数据源）<br>JNDI 使用JNDI实现的数据源</p></blockquote><p>　　相应地，MyBatis 内部分别定义了实现了 java.sql.DataSource 接口的 UnpooledDataSource，PooledDataSource 类来表示 UNPOOLED、POOLED 类型的数据源。</p><h3 id="6-2Mybatis中数据源的配置"><a href="#6-2Mybatis中数据源的配置" class="headerlink" title="6.2Mybatis中数据源的配置"></a>6.2Mybatis中数据源的配置</h3><p>数据源配置就是在 SqlMapConfig.xml 文件中，具体配置如下：</p><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源（连接池）信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 在初始化时，根据的 type 属性来创建相应类型的的数据源 DataSource，即：<br>type=”POOLED”：MyBatis 会创建 PooledDataSource 实例<br>type=”UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例<br>type=”JNDI”：MyBatis 会从 JNDI 服务上查找 DataSource 实例，然后返回使用</p><h2 id="7-Mybatis中事务控制"><a href="#7-Mybatis中事务控制" class="headerlink" title="7. Mybatis中事务控制"></a>7. Mybatis中事务控制</h2><h3 id="7-1-Mybatis中事务提交方式"><a href="#7-1-Mybatis中事务提交方式" class="headerlink" title="7.1 Mybatis中事务提交方式"></a>7.1 Mybatis中事务提交方式</h3><p>　　Mybatis中事务的提交方式，本质上就是调用JDBC的setAutoComment（）来实现事务控制，默认情况下setAutoComment（）的参数为false，所以我们要手动使用SqlSession.commit（）来提交事务</p><h3 id="7-2-Mybatis自动提交事务的设置"><a href="#7-2-Mybatis自动提交事务的设置" class="headerlink" title="7.2 Mybatis自动提交事务的设置"></a>7.2 Mybatis自动提交事务的设置</h3><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在创建SqlSession工厂对象时，传入true</span></span><br><span class="line">SqlSession session = factory.openSession（<span class="keyword">true</span>）;</span><br></pre></td></tr></table></figure><h2 id="8-Mybatis中的动态SQL语句"><a href="#8-Mybatis中的动态SQL语句" class="headerlink" title="8.Mybatis中的动态SQL语句"></a>8.Mybatis中的动态SQL语句</h2><p>主要就是使用Mybatis中提供的动态SQL语句标签</p><h2 id="9-Mybatis延迟加载策略"><a href="#9-Mybatis延迟加载策略" class="headerlink" title="9. Mybatis延迟加载策略"></a>9. Mybatis延迟加载策略</h2><h3 id="9-1-何为延迟加载"><a href="#9-1-何为延迟加载" class="headerlink" title="9.1 何为延迟加载"></a>9.1 何为延迟加载</h3><p>延迟加载：就是需要用到数据是才进行加载，不需要用到数据时就不加载数据。也称为懒加载</p><ul><li>好处：先从单表查询，需要时再关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快</li><li>坏处：因为只有当需要用到数据时，才会进行数据库查询，这样大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体检下降。</li></ul><h3 id="9-2-开启Mybatis的延迟加载策略"><a href="#9-2-开启Mybatis的延迟加载策略" class="headerlink" title="9.2 开启Mybatis的延迟加载策略"></a>9.2 开启Mybatis的延迟加载策略</h3><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.需要再Mybatis的配置文件SqlMapConfig.xml文件中添加延迟加载的配置</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.使用Collection实现延迟加载</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- collection 是用于建立一对多中集合属性的对应关系</span></span><br><span class="line"><span class="comment">ofType 用于指定集合元素的数据类型</span></span><br><span class="line"><span class="comment">select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）</span></span><br><span class="line"><span class="comment">column 是用于指定使用哪个字段的值作为条件查询</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span>&gt;</span>标签：</span><br><span class="line">主要用于加载关联的集合对象</span><br><span class="line">select 属性：</span><br><span class="line">用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id</span><br><span class="line">column 属性：</span><br><span class="line">用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一个字段名了</span><br></pre></td></tr></table></figure><h2 id="10-Mybatis缓存"><a href="#10-Mybatis缓存" class="headerlink" title="10. Mybatis缓存"></a>10. Mybatis缓存</h2><p>Mybatis通过缓存策略来减少数据库的查询次数，从而提高性能</p><h3 id="10-1-Mybatis一级缓存"><a href="#10-1-Mybatis一级缓存" class="headerlink" title="10.1 Mybatis一级缓存"></a>10.1 Mybatis一级缓存</h3><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。<br>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p><h3 id="10-2-Mybatis二级缓存"><a href="#10-2-Mybatis二级缓存" class="headerlink" title="10.2 Mybatis二级缓存"></a>10.2 Mybatis二级缓存</h3><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><blockquote><p>二级缓存的开启与关闭</p></blockquote><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">第一步：在SqlMapConfig.xml文件开启二级缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存。</span><br><span class="line"></span><br><span class="line">第二步：配置相关的Mapper映射文件</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span>标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.holicCode.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">第三部：配置statement上面的useCache属性</span><br><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">将 UserDao.xml 映射文件中的<span class="tag">&lt;<span class="name">select</span>&gt;</span>标签中设置 useCache=”true”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 false。</span><br><span class="line">注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存</span><br></pre></td></tr></table></figure><blockquote><p>基于注解的二级缓存</p></blockquote><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.在SqlMapConfig中开启二级缓存支持</span><br><span class="line"><span class="comment">&lt;!-- 配置二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.在持久层接口中使用注解配置二级缓存</span><br><span class="line">@CacheNamespace(blocking=true)//mybatis 基于注解方式实现配置二级缓存</span><br><span class="line">public interface IUserDao &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二级缓存的注意事项</p></blockquote><p>当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。</p><h2 id="11-Mybatis的注解开发"><a href="#11-Mybatis的注解开发" class="headerlink" title="11. Mybatis的注解开发"></a>11. Mybatis的注解开发</h2><h3 id="11-1Mybatis常用注解说明"><a href="#11-1Mybatis常用注解说明" class="headerlink" title="11.1Mybatis常用注解说明"></a>11.1Mybatis常用注解说明</h3><blockquote><p>@Insert:实现新增<br>@Update:实现更新<br>@Delete:实现删除<br>@Select:实现查询<br>@Result:实现结果集封装<br>@Results:可以与@Result 一起使用，封装多个结果集<br>@ResultMap:实现引用@Results 定义的封装<br>@One:实现一对一结果集封装<br>@Many:实现一对多结果集封装<br>@SelectProvider: 实现动态 SQL 映射<br>@CacheNamespace:实现注解二级缓存的使用</p></blockquote><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2021/10/06/Redis/"/>
      <url>/2021/10/06/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h1 id="一、从NoSQL说起"><a href="#一、从NoSQL说起" class="headerlink" title="一、从NoSQL说起"></a>一、从NoSQL说起</h1><p>NoSQL是Not only SQL的缩写，大意为“不只是SQL”，说明这项技术是<strong>传统关系型数据库的补充</strong>而非替代。在整个NoSQL技术栈中<strong>MemCache</strong>、<strong>Redis</strong>、<strong>MongoDB</strong>被称为NoSQL三剑客。那么时代为什么需要NoSQL数据库呢？我们来做个对比：</p><table><thead><tr><th align="left"></th><th align="left">关系型数据库</th><th align="left">NoSQL数据库</th></tr></thead><tbody><tr><td align="left">数据存储位置</td><td align="left">硬盘</td><td align="left">内存</td></tr><tr><td align="left">数据结构</td><td align="left">高度组织化结构化数据</td><td align="left">没有预定义的模式</td></tr><tr><td align="left">数据操作方式</td><td align="left">SQL</td><td align="left">所有数据都是键值对，没有声明性查询语言</td></tr><tr><td align="left">事务控制</td><td align="left">严格的基础事务ACID原则</td><td align="left">CAP定理</td></tr></tbody></table><p>所以NoSQL数据库的最大优势体现为：高性能、高可用性和可伸缩性。</p><h1 id="二、Redis简介"><a href="#二、Redis简介" class="headerlink" title="二、Redis简介"></a>二、Redis简介</h1><p>Redis英文官网介绍：</p><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p><p>Redis中文官网介绍：</p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><p>Redis命令参考文档网址：<a href="http://redisdoc.com/">http://redisdoc.com</a></p><h1 id="三、Redis安装"><a href="#三、Redis安装" class="headerlink" title="三、Redis安装"></a>三、Redis安装</h1><h2 id="1-上传并解压"><a href="#1-上传并解压" class="headerlink" title="1.上传并解压"></a>1.上传并解压</h2><p>redis-4.0.2.tar.gz</p><h2 id="2-安装C语言编译环境"><a href="#2-安装C语言编译环境" class="headerlink" title="2.安装C语言编译环境"></a>2.安装C语言编译环境</h2><p>[建议先拍快照]</p><p>yum install -y gcc-c++</p><h2 id="3-修改安装位置"><a href="#3-修改安装位置" class="headerlink" title="3.修改安装位置"></a>3.修改安装位置</h2><p>vim redis解压目录/src/Makefile</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PREFIX?=/usr/local/redis</span><br></pre></td></tr></table></figure><p>就Redis自身而言是不需要修改的，这里修改的目的是让Redis的运行程序不要和其他文件混杂在一起。</p><h2 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h2><p>编译：进入Redis解压目录执行make命令</p><p>[建议先拍快照]</p><p>安装：make install</p><h2 id="5-启动Redis服务器"><a href="#5-启动Redis服务器" class="headerlink" title="5.启动Redis服务器"></a>5.启动Redis服务器</h2><h3 id="①默认启动"><a href="#①默认启动" class="headerlink" title="①默认启动"></a>①默认启动</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@rich ~]# /usr/local/redis/bin/redis-server</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=7239, just started</span><br><span class="line">7239:C 07 Oct 18:59:12.144 # Warning: no config file specified, using the default config. In order to specify a config file use /usr/local/redis/bin/redis-server /path/to/redis.conf</span><br><span class="line">7239:M 07 Oct 18:59:12.145 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 4.0.2 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 7239</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # Server initialized</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">7239:M 07 Oct 18:59:12.148 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>停止Redis服务器</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7239:M 07 Oct 19:00:53.208 # User requested shutdown...</span><br><span class="line">7239:M 07 Oct 19:00:53.208 * Saving the final RDB snapshot before exiting.</span><br><span class="line">7239:M 07 Oct 19:00:53.214 * DB saved on disk</span><br><span class="line">7239:M 07 Oct 19:00:53.214 # Redis is now ready to exit, bye bye...</span><br></pre></td></tr></table></figure><h3 id="②定制配置项启动"><a href="#②定制配置项启动" class="headerlink" title="②定制配置项启动"></a>②定制配置项启动</h3><h4 id="1-准备配置文件"><a href="#1-准备配置文件" class="headerlink" title="[1]准备配置文件"></a>[1]准备配置文件</h4><p>cp /opt/redis-4.0.2/redis.conf /usr/local/redis/</p><h4 id="2-修改配置项"><a href="#2-修改配置项" class="headerlink" title="[2]修改配置项"></a>[2]修改配置项</h4><table><thead><tr><th align="left">配置项名称</th><th align="left">作用</th><th align="left">取值</th></tr></thead><tbody><tr><td align="left">daemonize</td><td align="left">控制是否以守护进程形式运行Redis服务器</td><td align="left">yes</td></tr><tr><td align="left">logfile</td><td align="left">指定日志文件位置</td><td align="left">“/var/logs/redis.log”</td></tr><tr><td align="left">dir</td><td align="left">Redis工作目录</td><td align="left">/usr/local/redis</td></tr></tbody></table><p>注意：/var/logs目录需要我们提前创建好</p><h4 id="3-让Redis根据指定的配置文件启动"><a href="#3-让Redis根据指定的配置文件启动" class="headerlink" title="[3]让Redis根据指定的配置文件启动"></a>[3]让Redis根据指定的配置文件启动</h4><p>格式</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server文件路径 redis.conf文件路径</span><br></pre></td></tr></table></figure><p>举例</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure><h2 id="6-客户端登录"><a href="#6-客户端登录" class="headerlink" title="6.客户端登录"></a>6.客户端登录</h2><p>/usr/local/redis/bin/redis-cli</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure><h1 id="四、Redis五种常用数据结构"><a href="#四、Redis五种常用数据结构" class="headerlink" title="四、Redis五种常用数据结构"></a>四、Redis五种常用数据结构</h1><h2 id="1-总体结构"><a href="#1-总体结构" class="headerlink" title="1.总体结构"></a>1.总体结构</h2><table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>string</td><td></td></tr><tr><td>list</td><td></td></tr><tr><td>set</td><td></td></tr><tr><td>hash</td><td></td></tr><tr><td>zset</td><td></td></tr></tbody></table><p>Redis中的数据，总体上是键值对，不同数据类型指的是键值对中值的类型。</p><h2 id="2-string类型"><a href="#2-string类型" class="headerlink" title="2.string类型"></a>2.string类型</h2><p>Redis中最基本的类型，它是key对应的一个单一值。二进制安全，不必担心由于编码等问题导致二进制数据变化。所以redis的string可以包含任何数据，比如jpg图片或者序列化的对象。Redis中一个字符串值的最大容量是512M。</p><h2 id="3-list类型"><a href="#3-list类型" class="headerlink" title="3.list类型"></a>3.list类型</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。说明它的底层是基于链表实现的，所以它操作时头尾效率高，中间效率低。</p><p><img src="https://icodezhan.github.io/2019/09/03/Redis%E7%9F%A5%E8%AF%86/p01.png" alt="p01"></p><h2 id="2-set类型"><a href="#2-set类型" class="headerlink" title="2.set类型"></a>2.set类型</h2><p>Redis的set是string类型的无序集合。它是基于哈希表实现的。</p><h2 id="3-hash类型"><a href="#3-hash类型" class="headerlink" title="3.hash类型"></a>3.hash类型</h2><p>本身就是一个键值对集合。可以当做Java中的Map&lt;String,Object&gt;对待。</p><h2 id="4-zset类型"><a href="#4-zset类型" class="headerlink" title="4.zset类型"></a>4.zset类型</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p><h1 id="五、Redis命令行操作"><a href="#五、Redis命令行操作" class="headerlink" title="五、Redis命令行操作"></a>五、Redis命令行操作</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h2><h3 id="①切换数据库"><a href="#①切换数据库" class="headerlink" title="①切换数据库"></a>①切换数据库</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis默认有16个数据库。</span><br><span class="line">115 # Set the number of databases. The default database is DB 0, you can select</span><br><span class="line">116 # a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line">117 # dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="line">118 databases 16</span><br><span class="line">使用select进行切换，数据库索引从0开始</span><br><span class="line">127.0.0.1:6379&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="②查看数据库长度"><a href="#②查看数据库长度" class="headerlink" title="②查看数据库长度"></a>②查看数据库长度</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h2 id="2-KEY操作"><a href="#2-KEY操作" class="headerlink" title="2.KEY操作"></a>2.KEY操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">●KEYS PATTERN</span><br><span class="line">●TYPE KEY</span><br><span class="line">返回KEY对应的值的类型</span><br><span class="line">●MOVE KEY DB</span><br><span class="line">把一组键值对数据移动到另一个数据库中</span><br><span class="line">●DEL KEY [KEY ...]</span><br><span class="line">根据KEY进行删除，至少要指定一个KEY</span><br><span class="line">●EXISTS KEY</span><br><span class="line">检查指定的KEY是否存在。指定一个KEY时，存在返回1，不存在返回0。可以指定多个，返回存在的KEY的数量。</span><br><span class="line">●RANDOMKEY</span><br><span class="line">在现有的KEY中随机返回一个</span><br><span class="line">●RENAME KEY NEWKEY</span><br><span class="line">重命名一个KEY，NEWKEY不管是否是已经存在的都会执行，如果NEWKEY已经存在则会被覆盖。</span><br><span class="line">●RENAMENX KEY NEWKEY</span><br><span class="line">只有在NEWKEY不存在时能够执行成功，否则失败</span><br><span class="line">●TIME</span><br><span class="line">返回当前UNIX时间戳</span><br><span class="line">●TTL KEY</span><br><span class="line">以秒为单位查看KEY还能存在多长时间</span><br><span class="line">●PTTL KEY</span><br><span class="line">以毫秒为单位查看KEY还能存在多长时间</span><br><span class="line">●EXPIRE KEY SECONDS</span><br><span class="line">给一个KEY设置在SECONDS秒后过期，过期会被Redis移除。</span><br><span class="line">●EXPIREAT KEY TIMESTAMP</span><br><span class="line">设置一个KEY在TIMESTAMP指定的时间过期</span><br><span class="line">●PEXPIRE KEY MILLISECONDS</span><br><span class="line">以毫秒为单位指定过期时间</span><br><span class="line">●PEXPIREAT KEY MILLISECONDS-TIMESTAMP</span><br><span class="line">以毫秒为单位指定过期的时间戳</span><br><span class="line">●PERSIST KEY</span><br><span class="line">移除过期时间，变成永久key</span><br></pre></td></tr></table></figure><h2 id="2-string操作"><a href="#2-string操作" class="headerlink" title="2.string操作"></a>2.string操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">●SET KEY VALUE [EX SECONDS] [PX MILLISECONDS] [NX|XX]</span><br><span class="line">给KEY设置一个string类型的值。</span><br><span class="line">EX参数用于设置存活的秒数。</span><br><span class="line">PX参数用于设置存活的毫秒数。</span><br><span class="line">NX参数表示当前命令中指定的KEY不存在才行。</span><br><span class="line">XX参数表示当前命令中指定的KEY存在才行。</span><br><span class="line">●GET KEY</span><br><span class="line">根据key得到值，只能用于string类型。</span><br><span class="line">●APPEND KEY VALUE</span><br><span class="line">把指定的value追加到KEY对应的原来的值后面，返回值是追加后字符串长度</span><br><span class="line">●STRLEN KEY</span><br><span class="line">直接返回字符串长度</span><br><span class="line">●INCR KEY</span><br><span class="line">自增1</span><br><span class="line">●DECR KEY</span><br><span class="line">自减1</span><br><span class="line">●INCRBY KEY INCREMENT</span><br><span class="line">原值+INCREMENT</span><br><span class="line">●DECRBY KEY DECREMENT</span><br><span class="line">原值-DECREMENT</span><br><span class="line">●GETRANGE KEY START END</span><br><span class="line">从字符串中取指定的一段</span><br><span class="line">●SETRANGE KEY OFFSET VALUE</span><br><span class="line">从offset开始使用VALUE进行替换</span><br><span class="line">●SETEX KEY SECONDS VALUE</span><br><span class="line">设置KEY,VALUE时指定存在秒数</span><br><span class="line">●SETNX KEY VALUE</span><br><span class="line">新建字符串类型的键值对</span><br><span class="line">●MSET KEY VALUE [KEY VALUE ...]</span><br><span class="line">一次性设置一组多个键值对</span><br><span class="line">●MGET KEY [KEY ...]</span><br><span class="line">一次性指定多个KEY，返回它们对应的值，没有值的KEY返回值是(nil)</span><br><span class="line">●MSETNX KEY VALUE [KEY VALUE ...]</span><br><span class="line">一次性新建多个值</span><br><span class="line">●GETSET KEY VALUE</span><br><span class="line">设置新值，同时能够将旧值返回</span><br></pre></td></tr></table></figure><h2 id="3-list操作"><a href="#3-list操作" class="headerlink" title="3.list操作"></a>3.list操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">●LPUSH key value [value ...]</span><br><span class="line">●RPUSH key value [value ...]</span><br><span class="line">●LRANGE key start stop</span><br><span class="line">根据list集合的索引打印元素数据</span><br><span class="line">正着数：0,1,2,3,...</span><br><span class="line">倒着数：-1,-2,-3,...</span><br><span class="line">●LLEN key</span><br><span class="line">●LPOP key</span><br><span class="line">从左边弹出一个元素。</span><br><span class="line">弹出=返回+删除。</span><br><span class="line">●RPOP key</span><br><span class="line">从右边弹出一个元素。</span><br><span class="line">●RPOPLPUSH source destination</span><br><span class="line">从source中RPOP一个元素，LPUSH到destination中</span><br><span class="line">●LINDEX key index</span><br><span class="line">根据索引从集合中取值</span><br><span class="line">●LINSERT key BEFORE|AFTER pivot value</span><br><span class="line">在pivot指定的值前面或后面插入value</span><br><span class="line">●LPUSHX key value</span><br><span class="line">只能针对存在的list执行LPUSH</span><br><span class="line">●LREM key count value</span><br><span class="line">根据count指定的数量从key对应的list中删除value</span><br><span class="line">●LSET key index value</span><br><span class="line">把指定索引位置的元素替换为另一个值</span><br><span class="line">●LTRIM key start stop</span><br><span class="line">仅保留指定区间的数据，两边的数据被删除</span><br></pre></td></tr></table></figure><h2 id="4-set操作"><a href="#4-set操作" class="headerlink" title="4.set操作"></a>4.set操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">●SADD key member [member ...]</span><br><span class="line">●SMEMBERS key</span><br><span class="line">●SCARD key</span><br><span class="line">返回集合中元素的数量</span><br><span class="line">●SISMEMBER key member</span><br><span class="line">检查当前指定member是否是集合中的元素</span><br><span class="line">●SREM key member [member ...]</span><br><span class="line">从集合中删除元素</span><br><span class="line">●SINTER key [key ...]</span><br><span class="line">将指定的集合进行“交集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">交集：b,c</span><br><span class="line">●SINTERSTORE destination key [key ...]</span><br><span class="line">取交集后存入destination</span><br><span class="line">●SDIFF key [key ...]</span><br><span class="line">将指定的集合执行“差集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">A对B执行diff：a</span><br><span class="line">相当于：A-交集部分</span><br><span class="line">●SDIFFSTORE destination key [key ...]</span><br><span class="line">●SUNION key [key ...]</span><br><span class="line">将指定的集合执行“并集”操作</span><br><span class="line">集合A：a,b,c</span><br><span class="line">集合B：b,c,d</span><br><span class="line">并集：a,b,c,d</span><br><span class="line">●SUNIONSTORE destination key [key ...]</span><br><span class="line">●SMOVE source destination member</span><br><span class="line">把member从source移动到destination</span><br><span class="line">●SPOP key [count]</span><br><span class="line">从集合中随机弹出count个数量的元素，count不指定就弹出1个</span><br><span class="line">●SRANDMEMBER key [count]</span><br><span class="line">从集合中随机返回count个数量的元素，count不指定就返回1个</span><br><span class="line">●SSCAN key cursor [MATCH pattern] [COUNT count]</span><br><span class="line">基于游标的遍历</span><br></pre></td></tr></table></figure><h2 id="5-hash操作"><a href="#5-hash操作" class="headerlink" title="5.hash操作"></a>5.hash操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">●HSET key field value</span><br><span class="line">●HGETALL key</span><br><span class="line">●HGET key field</span><br><span class="line">●HLEN key</span><br><span class="line">●HKEYS key</span><br><span class="line">●HVALS key</span><br><span class="line">●HEXISTS key field</span><br><span class="line">●HDEL key field [field ...]</span><br><span class="line">●HINCRBY key field increment</span><br><span class="line">●HMGET key field [field ...]</span><br><span class="line">●HMSET key field value [field value ...]</span><br><span class="line">●HSETNX key field value</span><br><span class="line">●HSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><h2 id="6-zset操作"><a href="#6-zset操作" class="headerlink" title="6.zset操作"></a>6.zset操作</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">●ZADD key [NX|XX] [CH] [INCR] score member [score member ...]</span><br><span class="line">●ZRANGE key start stop [WITHSCORES]</span><br><span class="line">●ZCARD key</span><br><span class="line">●ZCOUNT key min max</span><br><span class="line">根据分数在min，max之间查找元素</span><br><span class="line">●ZSCORE key member</span><br><span class="line">●ZINCRBY key increment member</span><br><span class="line">●ZLEXCOUNT key min max</span><br><span class="line">●ZRANGEBYLEX key min max [LIMIT offset count]</span><br><span class="line">按照字母顺序在区间内返回member</span><br><span class="line">min和max使用“[a”表示闭区间，使用“(a”表示开区间</span><br><span class="line">-表示负无穷</span><br><span class="line">+表示正无穷</span><br><span class="line">●ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line">在分数的指定区间内返回数据</span><br><span class="line">●ZRANK key member</span><br><span class="line">先对分数进行升序排序，返回member的排名</span><br><span class="line">●ZREM key member [member ...]</span><br><span class="line">●ZREMRANGEBYLEX key min max</span><br><span class="line">●ZREMRANGEBYRANK key start stop</span><br><span class="line">●ZREMRANGEBYSCORE key min max</span><br><span class="line">●ZREVRANGE key start stop [WITHSCORES]</span><br><span class="line">●ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</span><br><span class="line">●ZREVRANK key member</span><br><span class="line">●ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line">●ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line">把指定集合的member取交集，分数会相加</span><br><span class="line">●ZSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><h1 id="六、Redis持久化机制"><a href="#六、Redis持久化机制" class="headerlink" title="六、Redis持久化机制"></a>六、Redis持久化机制</h1><p><a href="https://redis.io/topics/persistence#snapshotting">官网描述</a></p><p>Redis工作时数据都存储在内存中，万一服务器断电，则所有数据都会丢失。针对这种情况，Redis采用持久化机制来增强数据安全性。</p><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><h3 id="①机制描述"><a href="#①机制描述" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>每隔一定的时间把内存中的数据作为一个快照保存到硬盘上的文件中。Redis默认开启RDB机制。</p><h3 id="②触发时机"><a href="#②触发时机" class="headerlink" title="②触发时机"></a>②触发时机</h3><h4 id="1-基于默认配置"><a href="#1-基于默认配置" class="headerlink" title="[1]基于默认配置"></a>[1]基于默认配置</h4><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>含义</p><table><thead><tr><th align="left">配置</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">save 900 1</td><td align="left">900秒内至少有一次修改则触发保存操作</td></tr><tr><td align="left">save 300 10</td><td align="left">300秒内至少有10次修改则触发保存操作</td></tr><tr><td align="left">save 60 10000</td><td align="left">60秒内至少有1万次修改则触发保存操作</td></tr></tbody></table><h4 id="2-使用保存命令"><a href="#2-使用保存命令" class="headerlink" title="[2]使用保存命令"></a>[2]使用保存命令</h4><p>save或bgsave</p><h4 id="3-使用flushall命令"><a href="#3-使用flushall命令" class="headerlink" title="[3]使用flushall命令"></a>[3]使用flushall命令</h4><p>这个命令也会产生dump.rdb文件，但里面是空的，没有意义</p><h4 id="4-服务器关闭"><a href="#4-服务器关闭" class="headerlink" title="[4]服务器关闭"></a>[4]服务器关闭</h4><p>如果执行SHUTDOWN命令让Redis正常退出，那么此前Redis就会执行一次持久化保存。</p><h3 id="③相关配置"><a href="#③相关配置" class="headerlink" title="③相关配置"></a>③相关配置</h3><table><thead><tr><th align="left">配置项</th><th align="left">取值</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">save</td><td align="left">“”</td><td align="left">禁用RDB机制</td></tr><tr><td align="left">dbfilename</td><td align="left">文件名，例如：dump.rdb</td><td align="left">设置RDB机制下，数据存储文件的文件名</td></tr><tr><td align="left">dir</td><td align="left">Redis工作目录路径</td><td align="left">指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr></tbody></table><h3 id="④思考"><a href="#④思考" class="headerlink" title="④思考"></a>④思考</h3><p>RDB机制能够保证数据的绝对安全吗？</p><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h2><h3 id="①机制描述-1"><a href="#①机制描述-1" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>根据配置文件中指定的策略，把生成数据的命令保存到硬盘上的文件中。一个AOF文件的内容可以参照下面的例子：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$6</span><br><span class="line">SELECT</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">$2</span><br><span class="line">10</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">incr</span><br><span class="line">$3</span><br><span class="line">num</span><br></pre></td></tr></table></figure><p>生成上面文件内容的Redis命令是：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set num 10</span><br><span class="line">incr num</span><br><span class="line">incr num</span><br><span class="line">incr num</span><br></pre></td></tr></table></figure><h3 id="②AOF基本配置"><a href="#②AOF基本配置" class="headerlink" title="②AOF基本配置"></a>②AOF基本配置</h3><table><thead><tr><th align="left">配置项</th><th align="left">取值</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">appendonly</td><td align="left">yes</td><td align="left">启用AOF持久化机制</td></tr><tr><td align="left"></td><td align="left">no</td><td align="left">禁用AOF持久化机制[默认值]</td></tr><tr><td align="left">appendfilename</td><td align="left">“文件名”</td><td align="left">AOF持久化文件名</td></tr><tr><td align="left">dir</td><td align="left">Redis工作目录路径</td><td align="left">指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr><tr><td align="left">appendfsync</td><td align="left">always</td><td align="left">每一次数据修改后都将执行文件写入操作，缓慢但是最安全。</td></tr><tr><td align="left"></td><td align="left">everysec</td><td align="left">每秒执行一次写入操作。折中。</td></tr><tr><td align="left"></td><td align="left">no</td><td align="left">由操作系统在适当的时候执行写入操作，最快。</td></tr></tbody></table><h3 id="③AOF重写"><a href="#③AOF重写" class="headerlink" title="③AOF重写"></a>③AOF重写</h3><p>对比下面两组命令：</p><table><thead><tr><th align="left">AOF重写前</th><th align="left">AOF重写后</th></tr></thead><tbody><tr><td align="left">set count 1 incr count incr count incr count</td><td align="left">set count 4</td></tr></tbody></table><p>两组命令执行后对于count来说最终的值是一致的，但是进行AOF重写后省略了中间过程，可以让AOF文件体积更小。而Redis会根据AOF文件的体积来决定是否进行AOF重写。参考的配置项如下：</p><table><thead><tr><th align="left">配置项</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">auto-aof-rewrite-percentage 100</td><td align="left">文件体积增大100%时执行AOF重写</td></tr><tr><td align="left">auto-aof-rewrite-min-size 64mb</td><td align="left">文件体积增长到64mb时执行AOF重写</td></tr></tbody></table><p>实际工作中不要进行频繁的AOF重写，因为CPU资源和硬盘资源二者之间肯定是CPU资源更加宝贵，所以不应该过多耗费CPU性能去节省硬盘空间。</p><h2 id="3-持久化文件损坏修复"><a href="#3-持久化文件损坏修复" class="headerlink" title="3.持久化文件损坏修复"></a>3.持久化文件损坏修复</h2><p>Redis服务器启动时如果读取了损坏的持久化文件会导致启动失败，此时为了让Redis服务器能够正常启动，需要对损坏的持久化文件进行修复。这里以AOF文件为例介绍修复操作的步骤。</p><ul><li><p>第一步：备份要修复的appendonly.aof文件</p></li><li><p>第二步：执行修复程序</p><p>/usr/local/redis/bin/redis-check-aof –fix /usr/local/redis/appendonly.aof</p></li><li><p>第三步：重启Redis</p></li></ul><p>注意：所谓修复持久化文件仅仅是把损坏的部分去掉，而没法把受损的数据找回。</p><h2 id="4-扩展阅读：两种持久化机制的取舍"><a href="#4-扩展阅读：两种持久化机制的取舍" class="headerlink" title="4.扩展阅读：两种持久化机制的取舍"></a>4.扩展阅读：两种持久化机制的取舍</h2><h3 id="①RDB"><a href="#①RDB" class="headerlink" title="①RDB"></a>①RDB</h3><h4 id="1-优势"><a href="#1-优势" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>适合大规模的数据恢复，速度较快</p><h4 id="2-劣势"><a href="#2-劣势" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>会丢失最后一次快照后的所有修改，不能绝对保证数据的高度一致性和完整性。Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑，但上述成立有条件，Linux也有优化手段</p><h3 id="②AOF"><a href="#②AOF" class="headerlink" title="②AOF"></a>②AOF</h3><h4 id="1-优势-1"><a href="#1-优势-1" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>选择appendfsync always方式运行时理论上能够做到数据完整一致，但此时性能又不好。文件内容具备一定可读性，能够用来分析Redis工作情况。</p><h4 id="2-劣势-1"><a href="#2-劣势-1" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>持久化相同的数据，文件体积比RDB大，恢复速度比RDB慢。效率在同步写入时低于RDB，不同步写入时与RDB相同。</p><h3 id="③RDB和AOF并存"><a href="#③RDB和AOF并存" class="headerlink" title="③RDB和AOF并存"></a>③RDB和AOF并存</h3><p>Redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</p><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)、快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p><h3 id="④使用建议"><a href="#④使用建议" class="headerlink" title="④使用建议"></a>④使用建议</h3><p>如果Redis仅仅作为缓存可以不使用任何持久化方式。</p><p>其他应用方式综合考虑性能和完整性、一致性要求。</p><p>RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。如果不开启AOF，仅靠Master-Slave Replication 实现高可用性能也不错。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p><h1 id="七、Redis事务控制"><a href="#七、Redis事务控制" class="headerlink" title="七、Redis事务控制"></a>七、Redis事务控制</h1><h2 id="1-Redis事务控制的相关命令"><a href="#1-Redis事务控制的相关命令" class="headerlink" title="1.Redis事务控制的相关命令"></a>1.Redis事务控制的相关命令</h2><table><thead><tr><th align="left">命令名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">MULTI</td><td align="left">表示开始收集命令，后面所有命令都不是马上执行，而是加入到一个队列中。</td></tr><tr><td align="left">EXEC</td><td align="left">执行MULTI后面命令队列中的所有命令。</td></tr><tr><td align="left">DISCARD</td><td align="left">放弃执行队列中的命令。</td></tr><tr><td align="left">WATCH</td><td align="left">“观察“、”监控“一个KEY，在当前队列外的其他命令操作这个KEY时，放弃执行自己队列的命令</td></tr><tr><td align="left">UNWATCH</td><td align="left">放弃监控一个KEY</td></tr></tbody></table><h2 id="2-命令队列执行失败的两种情况"><a href="#2-命令队列执行失败的两种情况" class="headerlink" title="2.命令队列执行失败的两种情况"></a>2.命令队列执行失败的两种情况</h2><h3 id="①加入队列时失败"><a href="#①加入队列时失败" class="headerlink" title="①加入队列时失败"></a>①加入队列时失败</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr age</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr age www</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;incr&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure><p>遇到了入队时即可检测到的错误，整个队列都不会执行。</p><h3 id="②执行队列时失败"><a href="#②执行队列时失败" class="headerlink" title="②执行队列时失败"></a>②执行队列时失败</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 30</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age ww</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 35</span><br><span class="line">3) (integer) 40</span><br><span class="line">4) (error) ERR value is not an integer or out of range</span><br><span class="line">5) (integer) 45</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;45&quot;</span><br></pre></td></tr></table></figure><p>错误在入队时检测不出来，整个队列执行时有错的命令执行失败，但是其他命令并没有回滚。</p><h3 id="③Redis为什么不支持回滚"><a href="#③Redis为什么不支持回滚" class="headerlink" title="③Redis为什么不支持回滚"></a>③Redis为什么不支持回滚</h3><p>官方解释如下：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。以下是这种做法的优点：</span><br><span class="line">1.Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。</span><br><span class="line">    2.因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</span><br><span class="line">有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 INCR 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 INCR ， 回滚是没有办法处理这些情况的。</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-悲观锁和乐观锁"><a href="#3-悲观锁和乐观锁" class="headerlink" title="3.悲观锁和乐观锁"></a>3.悲观锁和乐观锁</h2><p>在使用WATCH命令监控一个KEY后，当前队列中的命令会由于外部命令的执行而放弃，这是乐观锁的体现。</p><ul><li><p>悲观锁</p><p>认为当前环境非常容易发生碰撞，所以执行操作前需要把数据锁定，操作完成后释放锁，其他操作才可以继续操作。</p></li><li><p>乐观锁</p><p>认为当前环境不容易发生碰撞，所以执行操作前不锁定数据，万一碰撞真的发生了，那么放弃自己的操作。</p></li></ul><h1 id="八、Redis主从复制机制"><a href="#八、Redis主从复制机制" class="headerlink" title="八、Redis主从复制机制"></a>八、Redis主从复制机制</h1><p><img src="https://icodezhan.github.io/2019/09/03/Redis%E7%9F%A5%E8%AF%86/p02.png" alt="p02"></p><h2 id="1-读写分离的好处："><a href="#1-读写分离的好处：" class="headerlink" title="1.读写分离的好处："></a>1.读写分离的好处：</h2><ul><li>性能优化：主服务器专注于写操作，可以用更适合写入数据的模式工作；同样，从服务器专注于读操作，可以用更适合读取数据的模式工作。</li><li>强化数据安全，避免单点故障：由于数据同步机制的存在，各个服务器之间数据保持一致，所以其中某个服务器宕机不会导致数据丢失或无法访问。从这个角度说参与主从复制的Redis服务器构成了一个<strong>集群</strong>。</li></ul><h2 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2.搭建步骤"></a>2.搭建步骤</h2><h3 id="①思路"><a href="#①思路" class="headerlink" title="①思路"></a>①思路</h3><p>Redis集群在运行时使用的是同一个可执行文件，只是对应的配置文件不同。</p><p><img src="https://icodezhan.github.io/2019/09/03/Redis%E7%9F%A5%E8%AF%86/p03.png" alt="p03"></p><p>每个配置文件中相同的参数是：</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">dir /usr/local/cluster-redis</span><br></pre></td></tr></table></figure><p>不同的参数有：</p><table><thead><tr><th align="left">配置项名称</th><th align="left">作用</th><th align="left">取值</th></tr></thead><tbody><tr><td align="left">port</td><td align="left">Redis服务器启动后监听的端口号</td><td align="left">6000 7000 8000</td></tr><tr><td align="left">dbfilename</td><td align="left">RDB文件存储位置</td><td align="left">dump6000.rdb dump7000.rdb dump8000.rdb</td></tr><tr><td align="left">logfile</td><td align="left">日志文件位置</td><td align="left">/var/logs/redis6000.log /var/logs/redis7000.log /var/logs/redis8000.log</td></tr><tr><td align="left">pidfile</td><td align="left">pid文件位置</td><td align="left">/var/run/redis6000.pid /var/run/redis7000.pid /var/run/redis8000.pid</td></tr></tbody></table><h3 id="②步骤"><a href="#②步骤" class="headerlink" title="②步骤"></a>②步骤</h3><ul><li>第一步：创建/usr/local/cluster-redis目录</li><li>第二步：把原始未经修改的redis.conf复制到/usr/local/cluster-redis目录</li><li>第三步：把/usr/local/cluster-redis目录下的redis.conf复制为redis6000.conf</li><li>第四步：按照既定计划修改redis6000.conf中的相关配置项<ul><li>daemonize yes</li><li>dir</li><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第五步：复制redis6000.conf为redis7000.conf</li><li>第六步：修改redis7000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第七步：复制redis6000.conf为redis8000.conf</li><li>第八步：修改redis8000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li></ul><h3 id="③启动Redis主从复制集群"><a href="#③启动Redis主从复制集群" class="headerlink" title="③启动Redis主从复制集群"></a>③启动Redis主从复制集群</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis6000.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis7000.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/cluster-redis/redis8000.conf</span><br></pre></td></tr></table></figure><p>使用redis-cli停止指定服务器的命令格式如下：</p><p>/usr/local/bin/redis-cli -h IP地址 -p 端口号 shutdown</p><h2 id="3-主从关系"><a href="#3-主从关系" class="headerlink" title="3.主从关系"></a>3.主从关系</h2><h3 id="①查看主从关系"><a href="#①查看主从关系" class="headerlink" title="①查看主从关系"></a>①查看主从关系</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>刚刚启动的集群服务器中每一个节点服务器都认为自己是主服务器。需要建立主从关系。</p><h3 id="②设定主从关系"><a href="#②设定主从关系" class="headerlink" title="②设定主从关系"></a>②设定主从关系</h3><p>在从机上指定主机位置即可</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF 127.0.0.1 6000</span><br></pre></td></tr></table></figure><h3 id="③取消主从关系"><a href="#③取消主从关系" class="headerlink" title="③取消主从关系"></a>③取消主从关系</h3><p>在从机上执行命令</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF NO ONE</span><br></pre></td></tr></table></figure><h2 id="4-初步测试"><a href="#4-初步测试" class="headerlink" title="4.初步测试"></a>4.初步测试</h2><ul><li>测试1：在主机写入数据，在从机查看</li><li>测试2：在从机写入数据报错。配置文件中的依据是：slave-read-only yes</li><li>测试3：主机执行SHUTDOWN看从机状态</li><li>测试4：主机恢复启动，看从机状态</li><li>测试5：从机SHUTDOWN，此时主机写入数据，从机恢复启动查看状态。重新设定主从关系后看新写入的数据是否同步。</li></ul><h2 id="5-哨兵模式"><a href="#5-哨兵模式" class="headerlink" title="5.哨兵模式"></a>5.哨兵模式</h2><h3 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h3><p>通过哨兵服务器监控master/slave实现主从复制集群的自动管理。</p><p><img src="https://icodezhan.github.io/2019/09/03/Redis%E7%9F%A5%E8%AF%86/p04.png" alt="p04"></p><h3 id="②相关概念"><a href="#②相关概念" class="headerlink" title="②相关概念"></a>②相关概念</h3><h4 id="1-主观下线"><a href="#1-主观下线" class="headerlink" title="[1]主观下线"></a>[1]主观下线</h4><p>1台哨兵检测到某节点服务器下线。</p><h4 id="2-客观下线"><a href="#2-客观下线" class="headerlink" title="[2]客观下线"></a>[2]客观下线</h4><p>认为某个节点服务器下线的哨兵服务器达到指定数量。这个数量后面在哨兵的启动配置文件中指定。</p><h3 id="③配置方式"><a href="#③配置方式" class="headerlink" title="③配置方式"></a>③配置方式</h3><p>简单起见我们只配置一台哨兵。我们所需要做的就是创建一个哨兵服务器运行所需要的配置文件。</p><p>vim /usr/local/cluster-redis/sentinel.conf</p><table><thead><tr><th align="left">格式</th><th align="left">sentinel monitor 为主机命名 主机IP 主机端口号 将主机判定为下线时需要Sentinel同意的数量</th></tr></thead><tbody><tr><td align="left">例子</td><td align="left">sentinel monitor mymaster 127.0.0.1 6000 1</td></tr></tbody></table><h3 id="④启动哨兵"><a href="#④启动哨兵" class="headerlink" title="④启动哨兵"></a>④启动哨兵</h3><p>/usr/local/redis/bin/redis-server /usr/local/cluster-redis/sentinel.conf –sentinel</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+sdown master mymaster 127.0.0.1 6379 【主观下线】</span><br><span class="line">+odown master mymaster 127.0.0.1 6379 #quorum 1/1【客观下线】</span><br><span class="line">……</span><br><span class="line">+vote-for-leader 17818eb9240c8a625d2c8a13ae9d99ae3a70f9d2 1【选举leader】</span><br><span class="line">……</span><br><span class="line">+failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379【把一个从机设置为主机】</span><br><span class="line"></span><br><span class="line">-------------挂掉的主机又重新启动---------------------</span><br><span class="line">-sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381【离开主观下线状态】</span><br><span class="line">+convert-to-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381【转换为从机】</span><br></pre></td></tr></table></figure><h1 id="九、发布订阅"><a href="#九、发布订阅" class="headerlink" title="九、发布订阅"></a>九、发布订阅</h1><h2 id="1-订阅一个频道"><a href="#1-订阅一个频道" class="headerlink" title="1.订阅一个频道"></a>1.订阅一个频道</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE cctv</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;cctv&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><h2 id="2-在一个频道上发布信息"><a href="#2-在一个频道上发布信息" class="headerlink" title="2.在一个频道上发布信息"></a>2.在一个频道上发布信息</h2><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH cctv hai</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE cctv</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;cctv&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;cctv&quot;</span><br><span class="line">3) &quot;hai&quot;</span><br></pre></td></tr></table></figure><h1 id="十、Jedis"><a href="#十、Jedis" class="headerlink" title="十、Jedis"></a>十、Jedis</h1><h2 id="1-一个对比"><a href="#1-一个对比" class="headerlink" title="1.一个对比"></a>1.一个对比</h2><table><thead><tr><th align="left"></th><th align="left">MySQL</th><th align="left">Redis</th></tr></thead><tbody><tr><td align="left">连接</td><td align="left">Connection</td><td align="left">Jedis</td></tr><tr><td align="left">连接池</td><td align="left">C3P0等等</td><td align="left">JedisPool</td></tr><tr><td align="left">操作完成</td><td align="left">关闭连接</td><td align="left">关闭连接</td></tr></tbody></table><h2 id="2-Redis准备"><a href="#2-Redis准备" class="headerlink" title="2.Redis准备"></a>2.Redis准备</h2><h3 id="①理解Redis配置文件中bind配置项含义"><a href="#①理解Redis配置文件中bind配置项含义" class="headerlink" title="①理解Redis配置文件中bind配置项含义"></a>①理解Redis配置文件中bind配置项含义</h3><p>bind后面跟的ip地址是客户端访问Redis时使用的IP地址。看下面例子：<br>| bind值 | 访问方式 |<br>| ———- | ——— |<br>| 127.0.0.1 | ./redis-cli -h 127.0.0.1 |<br>| 192.168.200.100 | ./redis-cli -h 192.168.200.100 |</p><h3 id="②查看Linux系统本机IP"><a href="#②查看Linux系统本机IP" class="headerlink" title="②查看Linux系统本机IP"></a>②查看Linux系统本机IP</h3><p>远程客户端访问Linux服务器时不能使用127.0.0.1，要使用网络上的实际IP。可以用ifconfig命令查看。</p><h3 id="③将Redis配置文件中的bind配置项设置为本机IP。"><a href="#③将Redis配置文件中的bind配置项设置为本机IP。" class="headerlink" title="③将Redis配置文件中的bind配置项设置为本机IP。"></a>③将Redis配置文件中的bind配置项设置为本机IP。</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind [你的实际IP]</span><br><span class="line">bind 192.168.200.100</span><br></pre></td></tr></table></figure><h2 id="3-Jedis"><a href="#3-Jedis" class="headerlink" title="3.Jedis"></a>3.Jedis</h2><p>复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定Redis服务器的IP地址和端口号</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.200.100&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行ping命令</span></span><br><span class="line">String ping = jedis.ping();</span><br><span class="line"></span><br><span class="line">System.out.println(ping);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h2 id="4-JedisPool"><a href="#4-JedisPool" class="headerlink" title="4.JedisPool"></a>4.JedisPool</h2><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明Linux服务器IP地址</span></span><br><span class="line">String host = <span class="string">&quot;192.168.200.100&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明Redis端口号</span></span><br><span class="line"><span class="keyword">int</span> port = Protocol.DEFAULT_PORT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接池对象</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(host, port);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Jedis对象连接Redis</span></span><br><span class="line">Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行具体操作</span></span><br><span class="line">String ping = jedis.ping();</span><br><span class="line"></span><br><span class="line">System.out.println(ping);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">jedisPool.close();</span><br></pre></td></tr></table></figure><p>————————————–本文结束感谢您的阅读————————————–</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/01/01/hello-world/"/>
      <url>/2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
